{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.responseInterceptor = responseInterceptor;\nconst zlib = require(\"zlib\");\nconst debug_1 = require(\"../debug\");\nconst function_1 = require(\"../utils/function\");\nconst debug = debug_1.Debug.extend('response-interceptor');\n/**\n * Intercept responses from upstream.\n * Automatically decompress (deflate, gzip, brotli).\n * Give developer the opportunity to modify intercepted Buffer and http.ServerResponse\n *\n * NOTE: must set options.selfHandleResponse=true (prevent automatic call of res.end())\n */\nfunction responseInterceptor(interceptor) {\n  return async function proxyResResponseInterceptor(proxyRes, req, res) {\n    debug('intercept proxy response');\n    const originalProxyRes = proxyRes;\n    let buffer = Buffer.from('', 'utf8');\n    // decompress proxy response\n    const _proxyRes = decompress(proxyRes, proxyRes.headers['content-encoding']);\n    // concat data stream\n    _proxyRes.on('data', chunk => buffer = Buffer.concat([buffer, chunk]));\n    _proxyRes.on('end', async () => {\n      // copy original headers\n      copyHeaders(proxyRes, res);\n      // call interceptor with intercepted response (buffer)\n      debug('call interceptor function: %s', (0, function_1.getFunctionName)(interceptor));\n      const interceptedBuffer = Buffer.from(await interceptor(buffer, originalProxyRes, req, res));\n      // set correct content-length (with double byte character support)\n      debug('set content-length: %s', Buffer.byteLength(interceptedBuffer, 'utf8'));\n      res.setHeader('content-length', Buffer.byteLength(interceptedBuffer, 'utf8'));\n      debug('write intercepted response');\n      res.write(interceptedBuffer);\n      res.end();\n    });\n    _proxyRes.on('error', error => {\n      res.end(`Error fetching proxied request: ${error.message}`);\n    });\n  };\n}\n/**\n * Streaming decompression of proxy response\n * source: https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L116\n */\nfunction decompress(proxyRes, contentEncoding) {\n  let _proxyRes = proxyRes;\n  let decompress;\n  switch (contentEncoding) {\n    case 'gzip':\n      decompress = zlib.createGunzip();\n      break;\n    case 'br':\n      decompress = zlib.createBrotliDecompress();\n      break;\n    case 'deflate':\n      decompress = zlib.createInflate();\n      break;\n    default:\n      break;\n  }\n  if (decompress) {\n    debug(`decompress proxy response with 'content-encoding': %s`, contentEncoding);\n    _proxyRes.pipe(decompress);\n    _proxyRes = decompress;\n  }\n  return _proxyRes;\n}\n/**\n * Copy original headers\n * https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L78\n */\nfunction copyHeaders(originalResponse, response) {\n  debug('copy original response headers');\n  response.statusCode = originalResponse.statusCode;\n  response.statusMessage = originalResponse.statusMessage;\n  if (response.setHeader) {\n    let keys = Object.keys(originalResponse.headers);\n    // ignore chunked, brotli, gzip, deflate headers\n    keys = keys.filter(key => !['content-encoding', 'transfer-encoding'].includes(key));\n    keys.forEach(key => {\n      let value = originalResponse.headers[key];\n      if (key === 'set-cookie') {\n        // remove cookie domain\n        value = Array.isArray(value) ? value : [value];\n        value = value.map(x => x.replace(/Domain=[^;]+?/i, ''));\n      }\n      response.setHeader(key, value);\n    });\n  } else {\n    response.headers = originalResponse.headers;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","responseInterceptor","zlib","require","debug_1","function_1","debug","Debug","extend","interceptor","proxyResResponseInterceptor","proxyRes","req","res","originalProxyRes","buffer","Buffer","from","_proxyRes","decompress","headers","on","chunk","concat","copyHeaders","getFunctionName","interceptedBuffer","byteLength","setHeader","write","end","error","message","contentEncoding","createGunzip","createBrotliDecompress","createInflate","pipe","originalResponse","response","statusCode","statusMessage","keys","filter","key","includes","forEach","Array","isArray","map","x","replace"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/node_modules/http-proxy-middleware/dist/handlers/response-interceptor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.responseInterceptor = responseInterceptor;\nconst zlib = require(\"zlib\");\nconst debug_1 = require(\"../debug\");\nconst function_1 = require(\"../utils/function\");\nconst debug = debug_1.Debug.extend('response-interceptor');\n/**\n * Intercept responses from upstream.\n * Automatically decompress (deflate, gzip, brotli).\n * Give developer the opportunity to modify intercepted Buffer and http.ServerResponse\n *\n * NOTE: must set options.selfHandleResponse=true (prevent automatic call of res.end())\n */\nfunction responseInterceptor(interceptor) {\n    return async function proxyResResponseInterceptor(proxyRes, req, res) {\n        debug('intercept proxy response');\n        const originalProxyRes = proxyRes;\n        let buffer = Buffer.from('', 'utf8');\n        // decompress proxy response\n        const _proxyRes = decompress(proxyRes, proxyRes.headers['content-encoding']);\n        // concat data stream\n        _proxyRes.on('data', (chunk) => (buffer = Buffer.concat([buffer, chunk])));\n        _proxyRes.on('end', async () => {\n            // copy original headers\n            copyHeaders(proxyRes, res);\n            // call interceptor with intercepted response (buffer)\n            debug('call interceptor function: %s', (0, function_1.getFunctionName)(interceptor));\n            const interceptedBuffer = Buffer.from(await interceptor(buffer, originalProxyRes, req, res));\n            // set correct content-length (with double byte character support)\n            debug('set content-length: %s', Buffer.byteLength(interceptedBuffer, 'utf8'));\n            res.setHeader('content-length', Buffer.byteLength(interceptedBuffer, 'utf8'));\n            debug('write intercepted response');\n            res.write(interceptedBuffer);\n            res.end();\n        });\n        _proxyRes.on('error', (error) => {\n            res.end(`Error fetching proxied request: ${error.message}`);\n        });\n    };\n}\n/**\n * Streaming decompression of proxy response\n * source: https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L116\n */\nfunction decompress(proxyRes, contentEncoding) {\n    let _proxyRes = proxyRes;\n    let decompress;\n    switch (contentEncoding) {\n        case 'gzip':\n            decompress = zlib.createGunzip();\n            break;\n        case 'br':\n            decompress = zlib.createBrotliDecompress();\n            break;\n        case 'deflate':\n            decompress = zlib.createInflate();\n            break;\n        default:\n            break;\n    }\n    if (decompress) {\n        debug(`decompress proxy response with 'content-encoding': %s`, contentEncoding);\n        _proxyRes.pipe(decompress);\n        _proxyRes = decompress;\n    }\n    return _proxyRes;\n}\n/**\n * Copy original headers\n * https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L78\n */\nfunction copyHeaders(originalResponse, response) {\n    debug('copy original response headers');\n    response.statusCode = originalResponse.statusCode;\n    response.statusMessage = originalResponse.statusMessage;\n    if (response.setHeader) {\n        let keys = Object.keys(originalResponse.headers);\n        // ignore chunked, brotli, gzip, deflate headers\n        keys = keys.filter((key) => !['content-encoding', 'transfer-encoding'].includes(key));\n        keys.forEach((key) => {\n            let value = originalResponse.headers[key];\n            if (key === 'set-cookie') {\n                // remove cookie domain\n                value = Array.isArray(value) ? value : [value];\n                value = value.map((x) => x.replace(/Domain=[^;]+?/i, ''));\n            }\n            response.setHeader(key, value);\n        });\n    }\n    else {\n        response.headers = originalResponse.headers;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}