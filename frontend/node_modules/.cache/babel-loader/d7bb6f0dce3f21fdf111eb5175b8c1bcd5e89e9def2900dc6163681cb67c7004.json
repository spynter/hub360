{"ast":null,"code":"var _jsxFileName = \"D:\\\\respaldo jose\\\\PROJECTS_V0\\\\hub360\\\\frontend\\\\src\\\\components\\\\Embed\\\\EmbedViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmbedViewer({\n  tour\n}) {\n  _s();\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const cameraRef = useRef();\n  // 1. Precarga de texturas al cargar el tour\n  const [sceneTextures, setSceneTextures] = useState({});\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Cargar escena actual\n    const loadScene = index => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({\n                color: 0x38bdf8,\n                emissive: 0x0ea5e9,\n                metalness: 0.3,\n                roughness: 0.5\n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n\n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n\n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas por hotspot\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n    };\n  }, [tour, currentSceneIndex]);\n\n  // 1. Precarga de texturas al cargar el tour\n  useEffect(() => {\n    if (!tour || !tour.scenes) return;\n    const loader = new THREE.TextureLoader();\n    const textures = {};\n    let loaded = 0;\n    tour.scenes.forEach((scene, idx) => {\n      loader.load(scene.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        textures[idx] = texture;\n        loaded++;\n        if (loaded === tour.scenes.length) {\n          setSceneTextures(textures);\n        }\n      }, undefined, () => {\n        loaded++;\n        if (loaded === tour.scenes.length) {\n          setSceneTextures(textures);\n        }\n      });\n    });\n  }, [tour]);\n\n  // 2. Cross-fade y zoom in/out en la transición de escenas\n  function startTransition(targetIdx) {\n    if (fade) return;\n    setFade(true);\n    setPendingSceneIndex(targetIdx);\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 35;\n    let duration = 350;\n    let start = null;\n    function animateZoomIn(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomIn);\n      } else {\n        // Precargar textura nueva\n        const nextTexture = sceneTextures[pendingSceneIndex !== null ? pendingSceneIndex : targetIdx];\n        const prevTexture = sceneTextures[currentSceneIndex];\n        if (nextTexture && prevTexture) {\n          crossFadeTextures(prevTexture, nextTexture, () => {\n            setCurrentSceneIndex(targetIdx);\n          });\n        } else {\n          setCurrentSceneIndex(targetIdx);\n        }\n      }\n    }\n    requestAnimationFrame(animateZoomIn);\n  }\n\n  // Cross-fade entre dos texturas\n  function crossFadeTextures(prevTexture, nextTexture, onComplete) {\n    const scene = containerRef.current.children[0]; // Assuming the scene is the first child of containerRef\n    // Limpiar escena\n    while (scene.children.length > 0) scene.remove(scene.children[0]);\n    // Geometría\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    // Materiales con transparencia\n    const prevMaterial = new THREE.MeshBasicMaterial({\n      map: prevTexture,\n      side: THREE.DoubleSide,\n      transparent: true,\n      opacity: 1\n    });\n    const nextMaterial = new THREE.MeshBasicMaterial({\n      map: nextTexture,\n      side: THREE.DoubleSide,\n      transparent: true,\n      opacity: 0\n    });\n    const prevSphere = new THREE.Mesh(geometry, prevMaterial);\n    const nextSphere = new THREE.Mesh(geometry, nextMaterial);\n    scene.add(prevSphere);\n    scene.add(nextSphere);\n    // Animar opacidad\n    let duration = 400;\n    let start = null;\n    function animateFade(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      prevMaterial.opacity = 1 - progress;\n      nextMaterial.opacity = progress;\n      if (progress < 1) {\n        requestAnimationFrame(animateFade);\n      } else {\n        scene.remove(prevSphere);\n        onComplete && onComplete();\n      }\n    }\n    requestAnimationFrame(animateFade);\n  }\n\n  // 3. Cuando cambia la escena, hacer fade out y zoom out (mantener igual)\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n    startTransition(idx);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"embed-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"three-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade-overlay${fade ? ' visible' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), tour.scenes.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scene-selector\",\n      children: tour.scenes.map((scene, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `scene-btn ${index === currentSceneIndex ? 'active' : ''}`,\n        onClick: () => handleSceneBtn(index),\n        children: scene.name || `Escena ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n}\n_s(EmbedViewer, \"zX8ZQyKRVWs/1bSbKMOALEGsMxs=\");\n_c = EmbedViewer;\nexport default EmbedViewer;\nvar _c;\n$RefreshReg$(_c, \"EmbedViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","jsxDEV","_jsxDEV","EmbedViewer","tour","_s","containerRef","currentSceneIndex","setCurrentSceneIndex","fade","setFade","pendingSceneIndex","setPendingSceneIndex","cameraRef","sceneTextures","setSceneTextures","scenes","length","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","current","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableDamping","dampingFactor","loadScene","index","children","remove","sceneData","geometry","SphereGeometry","scale","textureLoader","TextureLoader","load","image","texture","minFilter","LinearFilter","magFilter","colorSpace","undefined","LinearSRGBColorSpace","material","MeshBasicMaterial","map","side","DoubleSide","sphere","Mesh","add","Array","isArray","hotspots","forEach","hotspot","type","radius","phi","MathUtils","degToRad","pitch","theta","yaw","x","Math","sin","y","cos","z","hGeo","hMat","MeshStandardMaterial","color","emissive","metalness","roughness","hMesh","userData","isAccessHotspot","hoveredObj","animate","requestAnimationFrame","accessSpheres","traverse","obj","push","t","Date","now","update","render","lastClickTime","dom","getAccessSpheres","arr","onPointerDown","event","button","rect","getBoundingClientRect","mouse","Vector2","clientX","left","width","clientY","top","height","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","object","targetSceneId","idx","findIndex","s","String","_id","startTransition","onPointerMove","style","cursor","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","dispose","removeChild","loader","textures","loaded","targetIdx","startFov","fov","endFov","duration","start","animateZoomIn","ts","progress","min","nextTexture","prevTexture","crossFadeTextures","onComplete","prevMaterial","transparent","opacity","nextMaterial","prevSphere","nextSphere","animateFade","animateZoomOut","setTimeout","handleSceneBtn","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/Embed/EmbedViewer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\n\nfunction EmbedViewer({ tour }) {\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const cameraRef = useRef();\n  // 1. Precarga de texturas al cargar el tour\n  const [sceneTextures, setSceneTextures] = useState({});\n\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75, \n      window.innerWidth / window.innerHeight, \n      0.1, \n      1000\n    );\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    \n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    \n    // Cargar escena actual\n    const loadScene = (index) => {\n      // Limpiar escena\n      while(scene.children.length > 0) { \n        scene.remove(scene.children[0]); \n      }\n      \n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      \n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({ \n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({ color: 0x38bdf8, emissive: 0x0ea5e9, metalness: 0.3, roughness: 0.5 });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n    \n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n    \n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas por hotspot\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n    \n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    \n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n    };\n  }, [tour, currentSceneIndex]);\n\n  // 1. Precarga de texturas al cargar el tour\n  useEffect(() => {\n    if (!tour || !tour.scenes) return;\n    const loader = new THREE.TextureLoader();\n    const textures = {};\n    let loaded = 0;\n    tour.scenes.forEach((scene, idx) => {\n      loader.load(\n        scene.image,\n        texture => {\n          texture.minFilter = THREE.LinearFilter;\n          texture.magFilter = THREE.LinearFilter;\n          if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n            texture.colorSpace = THREE.LinearSRGBColorSpace;\n          }\n          textures[idx] = texture;\n          loaded++;\n          if (loaded === tour.scenes.length) {\n            setSceneTextures(textures);\n          }\n        },\n        undefined,\n        () => {\n          loaded++;\n          if (loaded === tour.scenes.length) {\n            setSceneTextures(textures);\n          }\n        }\n      );\n    });\n  }, [tour]);\n\n  // 2. Cross-fade y zoom in/out en la transición de escenas\n  function startTransition(targetIdx) {\n    if (fade) return;\n    setFade(true);\n    setPendingSceneIndex(targetIdx);\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 35;\n    let duration = 350;\n    let start = null;\n    function animateZoomIn(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomIn);\n      } else {\n        // Precargar textura nueva\n        const nextTexture = sceneTextures[pendingSceneIndex !== null ? pendingSceneIndex : targetIdx];\n        const prevTexture = sceneTextures[currentSceneIndex];\n        if (nextTexture && prevTexture) {\n          crossFadeTextures(prevTexture, nextTexture, () => {\n            setCurrentSceneIndex(targetIdx);\n          });\n        } else {\n          setCurrentSceneIndex(targetIdx);\n        }\n      }\n    }\n    requestAnimationFrame(animateZoomIn);\n  }\n\n  // Cross-fade entre dos texturas\n  function crossFadeTextures(prevTexture, nextTexture, onComplete) {\n    const scene = containerRef.current.children[0]; // Assuming the scene is the first child of containerRef\n    // Limpiar escena\n    while (scene.children.length > 0) scene.remove(scene.children[0]);\n    // Geometría\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    // Materiales con transparencia\n    const prevMaterial = new THREE.MeshBasicMaterial({ map: prevTexture, side: THREE.DoubleSide, transparent: true, opacity: 1 });\n    const nextMaterial = new THREE.MeshBasicMaterial({ map: nextTexture, side: THREE.DoubleSide, transparent: true, opacity: 0 });\n    const prevSphere = new THREE.Mesh(geometry, prevMaterial);\n    const nextSphere = new THREE.Mesh(geometry, nextMaterial);\n    scene.add(prevSphere);\n    scene.add(nextSphere);\n    // Animar opacidad\n    let duration = 400;\n    let start = null;\n    function animateFade(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      prevMaterial.opacity = 1 - progress;\n      nextMaterial.opacity = progress;\n      if (progress < 1) {\n        requestAnimationFrame(animateFade);\n      } else {\n        scene.remove(prevSphere);\n        onComplete && onComplete();\n      }\n    }\n    requestAnimationFrame(animateFade);\n  }\n\n  // 3. Cuando cambia la escena, hacer fade out y zoom out (mantener igual)\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n    startTransition(idx);\n  }\n\n  return (\n    <div className=\"embed-viewer\">\n      <div ref={containerRef} className=\"three-container\"></div>\n      <div className={`fade-overlay${fade ? ' visible' : ''}`}></div>\n      {tour.scenes.length > 1 && (\n        <div className=\"scene-selector\">\n          {tour.scenes.map((scene, index) => (\n            <button\n              key={index}\n              className={`scene-btn ${index === currentSceneIndex ? 'active' : ''}`}\n              onClick={() => handleSceneBtn(index)}\n            >\n              {scene.name || `Escena ${index + 1}`}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmbedViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}