{"ast":null,"code":"var _jsxFileName = \"D:\\\\respaldo jose\\\\PROJECTS_V0\\\\hub360\\\\frontend\\\\src\\\\components\\\\Embed\\\\EmbedViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\nimport TransitionManager from '../../utils/transitionManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmbedViewer({\n  tour\n}) {\n  _s();\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const cameraRef = useRef();\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  const transitionManagerRef = useRef(null);\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      powerPreference: \"high-performance\",\n      stencil: false,\n      depth: false\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    rendererRef.current = renderer;\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Inicializar el gestor de transiciones\n    transitionManagerRef.current = new TransitionManager();\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = -0.5;\n    controls.enableZoom = true;\n    controls.minDistance = 0.05;\n    controls.maxDistance = 2.5;\n\n    // Cargar escena actual\n    const loadScene = index => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        if (renderer.capabilities.getMaxAnisotropy) {\n          texture.anisotropy = Math.min(16, renderer.capabilities.getMaxAnisotropy());\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n\n        // Renderizar hotspots de acceso con mejor calidad visual\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n\n              // Crear hotspot con mejor diseño visual\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({\n                color: 0x38bdf8,\n                emissive: 0x0ea5e9,\n                metalness: 0.3,\n                roughness: 0.5,\n                transparent: true,\n                opacity: 0.9\n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n\n              // Agregar efecto de luz para el hotspot\n              const light = new THREE.PointLight(0x38bdf8, 0.5, 50);\n              light.position.set(x, y, z);\n              scene.add(light);\n            }\n          });\n        }\n      });\n    };\n\n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n\n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas por hotspot\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                // Usar el gestor de transiciones para una transición suave\n                const currentScene = tour.scenes[currentSceneIndex];\n                const nextScene = tour.scenes[idx];\n\n                // Efecto de zoom in antes de la transición\n                transitionManagerRef.current.animateCameraZoom(camera, 35, 300).then(() => {\n                  transitionManagerRef.current.startTransition(scene, camera, renderer, null, nextScene.image, () => {\n                    setCurrentSceneIndex(idx);\n                    // Efecto de zoom out después de la transición\n                    transitionManagerRef.current.animateCameraZoom(camera, 75, 400);\n                  });\n                });\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n      if (transitionManagerRef.current) {\n        transitionManagerRef.current.dispose();\n      }\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n\n    // Usar el gestor de transiciones para una transición suave\n    const currentScene = tour.scenes[currentSceneIndex];\n    const nextScene = tour.scenes[idx];\n\n    // Efecto de zoom in antes de la transición\n    transitionManagerRef.current.animateCameraZoom(cameraRef.current, 35, 300).then(() => {\n      transitionManagerRef.current.startTransition(sceneRef.current, cameraRef.current, rendererRef.current, null, nextScene.image, () => {\n        setCurrentSceneIndex(idx);\n        // Efecto de zoom out después de la transición\n        transitionManagerRef.current.animateCameraZoom(cameraRef.current, 75, 400);\n      });\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"embed-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"three-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade-overlay${fade ? ' visible' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), tour.scenes.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scene-selector\",\n      children: tour.scenes.map((scene, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `scene-btn ${index === currentSceneIndex ? 'active' : ''}`,\n        onClick: () => handleSceneBtn(index),\n        children: scene.name || `Escena ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n}\n_s(EmbedViewer, \"cZF46CixhwrcHiSRu9z5Ay2NKkw=\");\n_c = EmbedViewer;\nexport default EmbedViewer;\nvar _c;\n$RefreshReg$(_c, \"EmbedViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","TransitionManager","jsxDEV","_jsxDEV","EmbedViewer","tour","_s","containerRef","currentSceneIndex","setCurrentSceneIndex","fade","setFade","cameraRef","sceneRef","rendererRef","transitionManagerRef","scenes","length","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","current","renderer","WebGLRenderer","antialias","powerPreference","stencil","depth","setSize","setPixelRatio","Math","min","devicePixelRatio","appendChild","domElement","controls","enableDamping","dampingFactor","rotateSpeed","enableZoom","minDistance","maxDistance","loadScene","index","children","remove","sceneData","geometry","SphereGeometry","scale","textureLoader","TextureLoader","load","image","texture","minFilter","LinearFilter","magFilter","colorSpace","undefined","LinearSRGBColorSpace","capabilities","getMaxAnisotropy","anisotropy","material","MeshBasicMaterial","map","side","DoubleSide","sphere","Mesh","add","Array","isArray","hotspots","forEach","hotspot","type","radius","phi","MathUtils","degToRad","pitch","theta","yaw","x","sin","y","cos","z","hGeo","hMat","MeshStandardMaterial","color","emissive","metalness","roughness","transparent","opacity","hMesh","userData","isAccessHotspot","light","PointLight","hoveredObj","animate","requestAnimationFrame","accessSpheres","traverse","obj","push","t","Date","now","update","render","lastClickTime","dom","getAccessSpheres","arr","onPointerDown","event","button","rect","getBoundingClientRect","mouse","Vector2","clientX","left","width","clientY","top","height","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","object","targetSceneId","idx","findIndex","s","String","_id","currentScene","nextScene","animateCameraZoom","then","startTransition","onPointerMove","style","cursor","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","dispose","removeChild","handleSceneBtn","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/Embed/EmbedViewer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\nimport TransitionManager from '../../utils/transitionManager';\n\nfunction EmbedViewer({ tour }) {\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const cameraRef = useRef();\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  const transitionManagerRef = useRef(null);\n\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75, \n      window.innerWidth / window.innerHeight, \n      0.1, \n      1000\n    );\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    \n    const renderer = new THREE.WebGLRenderer({ \n      antialias: true,\n      powerPreference: \"high-performance\",\n      stencil: false,\n      depth: false\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    rendererRef.current = renderer;\n    containerRef.current.appendChild(renderer.domElement);\n    \n    // Inicializar el gestor de transiciones\n    transitionManagerRef.current = new TransitionManager();\n    \n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.rotateSpeed = -0.5;\n    controls.enableZoom = true;\n    controls.minDistance = 0.05;\n    controls.maxDistance = 2.5;\n    \n    // Cargar escena actual\n    const loadScene = (index) => {\n      // Limpiar escena\n      while(scene.children.length > 0) { \n        scene.remove(scene.children[0]); \n      }\n      \n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      \n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        if (renderer.capabilities.getMaxAnisotropy) {\n          texture.anisotropy = Math.min(16, renderer.capabilities.getMaxAnisotropy());\n        }\n        const material = new THREE.MeshBasicMaterial({ \n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n        \n        // Renderizar hotspots de acceso con mejor calidad visual\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              \n              // Crear hotspot con mejor diseño visual\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({ \n                color: 0x38bdf8, \n                emissive: 0x0ea5e9, \n                metalness: 0.3, \n                roughness: 0.5,\n                transparent: true,\n                opacity: 0.9\n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n              \n              // Agregar efecto de luz para el hotspot\n              const light = new THREE.PointLight(0x38bdf8, 0.5, 50);\n              light.position.set(x, y, z);\n              scene.add(light);\n            }\n          });\n        }\n      });\n    };\n    \n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n    \n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas por hotspot\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    \n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    \n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                // Usar el gestor de transiciones para una transición suave\n                const currentScene = tour.scenes[currentSceneIndex];\n                const nextScene = tour.scenes[idx];\n                \n                // Efecto de zoom in antes de la transición\n                transitionManagerRef.current.animateCameraZoom(camera, 35, 300).then(() => {\n                  transitionManagerRef.current.startTransition(\n                    scene,\n                    camera,\n                    renderer,\n                    null,\n                    nextScene.image,\n                    () => {\n                      setCurrentSceneIndex(idx);\n                      // Efecto de zoom out después de la transición\n                      transitionManagerRef.current.animateCameraZoom(camera, 75, 400);\n                    }\n                  );\n                });\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    \n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    \n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n    \n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    \n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n      if (transitionManagerRef.current) {\n        transitionManagerRef.current.dispose();\n      }\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n    \n    // Usar el gestor de transiciones para una transición suave\n    const currentScene = tour.scenes[currentSceneIndex];\n    const nextScene = tour.scenes[idx];\n    \n    // Efecto de zoom in antes de la transición\n    transitionManagerRef.current.animateCameraZoom(cameraRef.current, 35, 300).then(() => {\n      transitionManagerRef.current.startTransition(\n        sceneRef.current,\n        cameraRef.current,\n        rendererRef.current,\n        null,\n        nextScene.image,\n        () => {\n          setCurrentSceneIndex(idx);\n          // Efecto de zoom out después de la transición\n          transitionManagerRef.current.animateCameraZoom(cameraRef.current, 75, 400);\n        }\n      );\n    });\n  }\n\n  return (\n    <div className=\"embed-viewer\">\n      <div ref={containerRef} className=\"three-container\"></div>\n      <div className={`fade-overlay${fade ? ' visible' : ''}`}></div>\n      {tour.scenes.length > 1 && (\n        <div className=\"scene-selector\">\n          {tour.scenes.map((scene, index) => (\n            <button\n              key={index}\n              className={`scene-btn ${index === currentSceneIndex ? 'active' : ''}`}\n              onClick={() => handleSceneBtn(index)}\n            >\n              {scene.name || `Escena ${index + 1}`}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmbedViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}