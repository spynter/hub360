{"ast":null,"code":"var _jsxFileName = \"D:\\\\respaldo jose\\\\PROJECTS_V0\\\\hub360\\\\frontend\\\\src\\\\components\\\\Embed\\\\EmbedViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\nimport RadialFadeMaterial from '../shaders/RadialFadeMaterial';\nimport NavigationFeedback from '../common/NavigationFeedback';\nimport { validateAccessHotspot, pitchYawToCartesian, createAccessHotspotUserData, getAbsoluteImageUrl } from '../../utils/hotspotUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmbedViewer({\n  tour\n}) {\n  _s();\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const cameraRef = useRef();\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  const [transitioning, setTransitioning] = useState(false);\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  const [prevTexture, setPrevTexture] = useState(null);\n  const [navigationInProgress, setNavigationInProgress] = useState(false);\n  const [hotspotFeedback, setHotspotFeedback] = useState(null);\n\n  // Función mejorada para validar hotspot de acceso usando utilidades compartidas\n  const validateHotspot = hotspot => {\n    return validateAccessHotspot(hotspot, tour.scenes, currentSceneIndex);\n  };\n\n  // Función mejorada para iniciar transición\n  const startTransition = targetIdx => {\n    if (transitioning || navigationInProgress) {\n      console.log('Navegación ya en progreso, ignorando clic');\n      return;\n    }\n    const targetScene = tour.scenes[targetIdx];\n    if (!targetScene) {\n      console.error('Escena destino no encontrada');\n      return;\n    }\n    console.log(`Iniciando transición a escena ${targetIdx}: ${targetScene.name}`);\n    setNavigationInProgress(true);\n    setTransitioning(true);\n    setTransitionProgress(0);\n    setPendingSceneIndex(targetIdx);\n\n    // Capturar textura actual para transición\n    if (rendererRef.current && sceneRef.current) {\n      const renderTarget = new THREE.WebGLRenderTarget(rendererRef.current.domElement.width, rendererRef.current.domElement.height);\n      rendererRef.current.setRenderTarget(renderTarget);\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      rendererRef.current.setRenderTarget(null);\n      setPrevTexture(renderTarget.texture);\n    }\n  };\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    rendererRef.current = renderer;\n    containerRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Cargar escena actual\n    const loadScene = index => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n\n        // Renderizar hotspots de acceso con mejor validación usando utilidades\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              // Validar que el hotspot tiene un destino válido\n              const validation = validateHotspot(hotspot);\n              if (!validation) {\n                console.warn('Hotspot de acceso inválido:', hotspot);\n                return;\n              }\n              const coords = pitchYawToCartesian(hotspot.pitch, hotspot.yaw, 500);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({\n                color: 0x38bdf8,\n                emissive: 0x0ea5e9,\n                metalness: 0.3,\n                roughness: 0.5\n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(coords.x, coords.y, coords.z);\n              hMesh.userData = createAccessHotspotUserData(hotspot, validation.targetScene.name);\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n\n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n\n    // Animación y hover mejorada\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Detección de clics mejorada\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      if (navigationInProgress) return; // Evitar clics durante navegación\n\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            const validation = validateHotspot(hotspot);\n            if (validation) {\n              // Mostrar feedback visual\n              setHotspotFeedback(`Navegando a: ${obj.userData.targetSceneName}`);\n              setTimeout(() => setHotspotFeedback(null), 2000);\n              startTransition(validation.targetIndex);\n            } else {\n              setHotspotFeedback('Destino no válido');\n              setTimeout(() => setHotspotFeedback(null), 2000);\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n        // Mostrar tooltip con información del destino\n        if (hoveredObj.userData.targetSceneName) {\n          dom.title = `Doble clic para ir a: ${hoveredObj.userData.targetSceneName}`;\n        }\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n        dom.title = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n    };\n  }, [tour, currentSceneIndex, navigationInProgress]);\n\n  // Animación de transición mejorada\n  useEffect(() => {\n    if (!transitioning) return;\n    let frame;\n    function animate() {\n      setTransitionProgress(prev => {\n        const next = Math.min(prev + 0.03, 1); // Transición más suave\n        if (next < 1) {\n          frame = requestAnimationFrame(animate);\n        } else {\n          setTransitioning(false);\n          setPrevTexture(null);\n          setCurrentSceneIndex(pendingSceneIndex);\n          setNavigationInProgress(false);\n        }\n        return next;\n      });\n    }\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }, [transitioning, pendingSceneIndex]);\n\n  // Renderizado de transición mejorado\n  useEffect(() => {\n    if (!sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n    if (!transitioning || !prevTexture) return;\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    const currentScene = tour.scenes[pendingSceneIndex];\n    const loader = new THREE.TextureLoader();\n    loader.load(currentScene.image, nextTexture => {\n      const material = RadialFadeMaterial(prevTexture, nextTexture, transitionProgress);\n      const sphere = new THREE.Mesh(geometry, material);\n      sceneRef.current.add(sphere);\n      function renderTransition() {\n        material.uniforms.uProgress.value = transitionProgress;\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n        if (transitioning) requestAnimationFrame(renderTransition);else sceneRef.current.remove(sphere);\n      }\n      renderTransition();\n    });\n  }, [transitioning, transitionProgress, pendingSceneIndex, tour]);\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n    startTransition(idx);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"embed-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"three-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade-overlay${fade ? ' visible' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavigationFeedback, {\n      hotspotFeedback: hotspotFeedback,\n      navigationInProgress: navigationInProgress,\n      isEmbed: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), tour.scenes.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scene-selector\",\n      children: tour.scenes.map((scene, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `scene-btn ${index === currentSceneIndex ? 'active' : ''}`,\n        onClick: () => handleSceneBtn(index),\n        children: scene.name || `Escena ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n}\n_s(EmbedViewer, \"QqBoqG0EIMdDcf72wBmtFWbqOfI=\");\n_c = EmbedViewer;\nexport default EmbedViewer;\nvar _c;\n$RefreshReg$(_c, \"EmbedViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","RadialFadeMaterial","NavigationFeedback","validateAccessHotspot","pitchYawToCartesian","createAccessHotspotUserData","getAbsoluteImageUrl","jsxDEV","_jsxDEV","EmbedViewer","tour","_s","containerRef","currentSceneIndex","setCurrentSceneIndex","fade","setFade","pendingSceneIndex","setPendingSceneIndex","cameraRef","sceneRef","rendererRef","transitioning","setTransitioning","transitionProgress","setTransitionProgress","prevTexture","setPrevTexture","navigationInProgress","setNavigationInProgress","hotspotFeedback","setHotspotFeedback","validateHotspot","hotspot","scenes","startTransition","targetIdx","console","log","targetScene","error","name","current","renderTarget","WebGLRenderTarget","domElement","width","height","setRenderTarget","render","texture","length","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","appendChild","controls","enableDamping","dampingFactor","loadScene","index","children","remove","sceneData","geometry","SphereGeometry","scale","textureLoader","TextureLoader","load","image","minFilter","LinearFilter","magFilter","colorSpace","undefined","LinearSRGBColorSpace","material","MeshBasicMaterial","map","side","DoubleSide","sphere","Mesh","add","Array","isArray","hotspots","forEach","type","validation","warn","coords","pitch","yaw","hGeo","hMat","MeshStandardMaterial","color","emissive","metalness","roughness","hMesh","x","y","z","userData","hoveredObj","animate","requestAnimationFrame","accessSpheres","traverse","obj","isAccessHotspot","push","t","Date","now","Math","sin","update","lastClickTime","dom","getAccessSpheres","arr","onPointerDown","event","button","rect","getBoundingClientRect","mouse","Vector2","clientX","left","clientY","top","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","object","targetSceneName","setTimeout","targetIndex","onPointerMove","style","cursor","title","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","dispose","removeChild","frame","prev","next","min","cancelAnimationFrame","currentScene","loader","nextTexture","renderTransition","uniforms","uProgress","value","startFov","fov","endFov","duration","start","animateZoomOut","ts","progress","handleSceneBtn","idx","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","isEmbed","onClick","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/Embed/EmbedViewer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\nimport RadialFadeMaterial from '../shaders/RadialFadeMaterial';\nimport NavigationFeedback from '../common/NavigationFeedback';\nimport { \n  validateAccessHotspot, \n  pitchYawToCartesian, \n  createAccessHotspotUserData,\n  getAbsoluteImageUrl\n} from '../../utils/hotspotUtils';\n\nfunction EmbedViewer({ tour }) {\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const cameraRef = useRef();\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  const [transitioning, setTransitioning] = useState(false);\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  const [prevTexture, setPrevTexture] = useState(null);\n  const [navigationInProgress, setNavigationInProgress] = useState(false);\n  const [hotspotFeedback, setHotspotFeedback] = useState(null);\n\n  // Función mejorada para validar hotspot de acceso usando utilidades compartidas\n  const validateHotspot = (hotspot) => {\n    return validateAccessHotspot(hotspot, tour.scenes, currentSceneIndex);\n  };\n\n  // Función mejorada para iniciar transición\n  const startTransition = (targetIdx) => {\n    if (transitioning || navigationInProgress) {\n      console.log('Navegación ya en progreso, ignorando clic');\n      return;\n    }\n\n    const targetScene = tour.scenes[targetIdx];\n    if (!targetScene) {\n      console.error('Escena destino no encontrada');\n      return;\n    }\n\n    console.log(`Iniciando transición a escena ${targetIdx}: ${targetScene.name}`);\n    setNavigationInProgress(true);\n    setTransitioning(true);\n    setTransitionProgress(0);\n    setPendingSceneIndex(targetIdx);\n\n    // Capturar textura actual para transición\n    if (rendererRef.current && sceneRef.current) {\n      const renderTarget = new THREE.WebGLRenderTarget(\n        rendererRef.current.domElement.width,\n        rendererRef.current.domElement.height\n      );\n      rendererRef.current.setRenderTarget(renderTarget);\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      rendererRef.current.setRenderTarget(null);\n      setPrevTexture(renderTarget.texture);\n    }\n  };\n\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75, \n      window.innerWidth / window.innerHeight, \n      0.1, \n      1000\n    );\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    rendererRef.current = renderer;\n    containerRef.current.appendChild(renderer.domElement);\n    \n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    \n    // Cargar escena actual\n    const loadScene = (index) => {\n      // Limpiar escena\n      while(scene.children.length > 0) { \n        scene.remove(scene.children[0]); \n      }\n      \n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      \n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({ \n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n        \n        // Renderizar hotspots de acceso con mejor validación usando utilidades\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              // Validar que el hotspot tiene un destino válido\n              const validation = validateHotspot(hotspot);\n              if (!validation) {\n                console.warn('Hotspot de acceso inválido:', hotspot);\n                return;\n              }\n\n              const coords = pitchYawToCartesian(hotspot.pitch, hotspot.yaw, 500);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({ \n                color: 0x38bdf8, \n                emissive: 0x0ea5e9, \n                metalness: 0.3, \n                roughness: 0.5 \n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(coords.x, coords.y, coords.z);\n              hMesh.userData = createAccessHotspotUserData(hotspot, validation.targetScene.name);\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n    \n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n    \n    // Animación y hover mejorada\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Detección de clics mejorada\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      if (navigationInProgress) return; // Evitar clics durante navegación\n\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            const validation = validateHotspot(hotspot);\n            if (validation) {\n              // Mostrar feedback visual\n              setHotspotFeedback(`Navegando a: ${obj.userData.targetSceneName}`);\n              setTimeout(() => setHotspotFeedback(null), 2000);\n              \n              startTransition(validation.targetIndex);\n            } else {\n              setHotspotFeedback('Destino no válido');\n              setTimeout(() => setHotspotFeedback(null), 2000);\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n        // Mostrar tooltip con información del destino\n        if (hoveredObj.userData.targetSceneName) {\n          dom.title = `Doble clic para ir a: ${hoveredObj.userData.targetSceneName}`;\n        }\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n        dom.title = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n    \n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    \n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n    };\n  }, [tour, currentSceneIndex, navigationInProgress]);\n\n  // Animación de transición mejorada\n  useEffect(() => {\n    if (!transitioning) return;\n    let frame;\n    function animate() {\n      setTransitionProgress(prev => {\n        const next = Math.min(prev + 0.03, 1); // Transición más suave\n        if (next < 1) {\n          frame = requestAnimationFrame(animate);\n        } else {\n          setTransitioning(false);\n          setPrevTexture(null);\n          setCurrentSceneIndex(pendingSceneIndex);\n          setNavigationInProgress(false);\n        }\n        return next;\n      });\n    }\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }, [transitioning, pendingSceneIndex]);\n\n  // Renderizado de transición mejorado\n  useEffect(() => {\n    if (!sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n    if (!transitioning || !prevTexture) return;\n    \n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    const currentScene = tour.scenes[pendingSceneIndex];\n    const loader = new THREE.TextureLoader();\n    loader.load(currentScene.image, nextTexture => {\n      const material = RadialFadeMaterial(prevTexture, nextTexture, transitionProgress);\n      const sphere = new THREE.Mesh(geometry, material);\n      sceneRef.current.add(sphere);\n      function renderTransition() {\n        material.uniforms.uProgress.value = transitionProgress;\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n        if (transitioning) requestAnimationFrame(renderTransition);\n        else sceneRef.current.remove(sphere);\n      }\n      renderTransition();\n    });\n  }, [transitioning, transitionProgress, pendingSceneIndex, tour]);\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n    startTransition(idx);\n  }\n\n  return (\n    <div className=\"embed-viewer\">\n      <div ref={containerRef} className=\"three-container\"></div>\n      <div className={`fade-overlay${fade ? ' visible' : ''}`}></div>\n      \n      {/* Componente de feedback visual de navegación */}\n      <NavigationFeedback \n        hotspotFeedback={hotspotFeedback}\n        navigationInProgress={navigationInProgress}\n        isEmbed={true}\n      />\n      \n      {tour.scenes.length > 1 && (\n        <div className=\"scene-selector\">\n          {tour.scenes.map((scene, index) => (\n            <button\n              key={index}\n              className={`scene-btn ${index === currentSceneIndex ? 'active' : ''}`}\n              onClick={() => handleSceneBtn(index)}\n            >\n              {scene.name || `Escena ${index + 1}`}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmbedViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}