{"ast":null,"code":"import * as THREE from 'three';\nexport default function FadeToBlackMaterial(prevTexture, nextTexture, progress) {\n  return new THREE.ShaderMaterial({\n    uniforms: {\n      uPrev: {\n        value: prevTexture\n      },\n      uNext: {\n        value: nextTexture\n      },\n      uProgress: {\n        value: progress\n      },\n      uResolution: {\n        value: new THREE.Vector2(1, 1)\n      }\n    },\n    vertexShader: `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform sampler2D uPrev;\n      uniform sampler2D uNext;\n      uniform float uProgress;\n      varying vec2 vUv;\n      \n      void main() {\n        vec4 prevColor = texture2D(uPrev, vUv);\n        vec4 nextColor = texture2D(uNext, vUv);\n        \n        // Fase 1: Fade out de la escena actual a negro (0.0 - 0.5)\n        // Fase 2: Fade in de la nueva escena desde negro (0.5 - 1.0)\n        float fadeOutProgress = smoothstep(0.0, 0.5, uProgress);\n        float fadeInProgress = smoothstep(0.5, 1.0, uProgress);\n        \n        // Fade out: prevColor -> black\n        vec4 blackColor = vec4(0.0, 0.0, 0.0, 1.0);\n        vec4 fadeOutResult = mix(prevColor, blackColor, fadeOutProgress);\n        \n        // Fade in: black -> nextColor\n        vec4 fadeInResult = mix(blackColor, nextColor, fadeInProgress);\n        \n        // Combinar las dos fases\n        vec4 finalColor;\n        if (uProgress <= 0.5) {\n          finalColor = fadeOutResult;\n        } else {\n          finalColor = fadeInResult;\n        }\n        \n        gl_FragColor = finalColor;\n      }\n    `,\n    transparent: false,\n    depthTest: false,\n    depthWrite: false\n  });\n}\n_c = FadeToBlackMaterial;\nvar _c;\n$RefreshReg$(_c, \"FadeToBlackMaterial\");","map":{"version":3,"names":["THREE","FadeToBlackMaterial","prevTexture","nextTexture","progress","ShaderMaterial","uniforms","uPrev","value","uNext","uProgress","uResolution","Vector2","vertexShader","fragmentShader","transparent","depthTest","depthWrite","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/shaders/FadeToBlackMaterial.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\nexport default function FadeToBlackMaterial(prevTexture, nextTexture, progress) {\r\n  return new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      uPrev: { value: prevTexture },\r\n      uNext: { value: nextTexture },\r\n      uProgress: { value: progress },\r\n      uResolution: { value: new THREE.Vector2(1, 1) },\r\n    },\r\n    vertexShader: `\r\n      varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n      uniform sampler2D uPrev;\r\n      uniform sampler2D uNext;\r\n      uniform float uProgress;\r\n      varying vec2 vUv;\r\n      \r\n      void main() {\r\n        vec4 prevColor = texture2D(uPrev, vUv);\r\n        vec4 nextColor = texture2D(uNext, vUv);\r\n        \r\n        // Fase 1: Fade out de la escena actual a negro (0.0 - 0.5)\r\n        // Fase 2: Fade in de la nueva escena desde negro (0.5 - 1.0)\r\n        float fadeOutProgress = smoothstep(0.0, 0.5, uProgress);\r\n        float fadeInProgress = smoothstep(0.5, 1.0, uProgress);\r\n        \r\n        // Fade out: prevColor -> black\r\n        vec4 blackColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n        vec4 fadeOutResult = mix(prevColor, blackColor, fadeOutProgress);\r\n        \r\n        // Fade in: black -> nextColor\r\n        vec4 fadeInResult = mix(blackColor, nextColor, fadeInProgress);\r\n        \r\n        // Combinar las dos fases\r\n        vec4 finalColor;\r\n        if (uProgress <= 0.5) {\r\n          finalColor = fadeOutResult;\r\n        } else {\r\n          finalColor = fadeInResult;\r\n        }\r\n        \r\n        gl_FragColor = finalColor;\r\n      }\r\n    `,\r\n    transparent: false,\r\n    depthTest: false,\r\n    depthWrite: false,\r\n  });\r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,eAAe,SAASC,mBAAmBA,CAACC,WAAW,EAAEC,WAAW,EAAEC,QAAQ,EAAE;EAC9E,OAAO,IAAIJ,KAAK,CAACK,cAAc,CAAC;IAC9BC,QAAQ,EAAE;MACRC,KAAK,EAAE;QAAEC,KAAK,EAAEN;MAAY,CAAC;MAC7BO,KAAK,EAAE;QAAED,KAAK,EAAEL;MAAY,CAAC;MAC7BO,SAAS,EAAE;QAAEF,KAAK,EAAEJ;MAAS,CAAC;MAC9BO,WAAW,EAAE;QAAEH,KAAK,EAAE,IAAIR,KAAK,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC;MAAE;IAChD,CAAC;IACDC,YAAY,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,WAAW,EAAE,KAAK;IAClBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE;EACd,CAAC,CAAC;AACJ;AAACC,EAAA,GApDuBjB,mBAAmB;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}