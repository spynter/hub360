{"ast":null,"code":"var _jsxFileName = \"D:\\\\respaldo jose\\\\PROJECTS_V0\\\\hub360\\\\frontend\\\\src\\\\components\\\\Viewer\\\\TourViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport api from '../../services/api';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './TourViewer.css';\nimport RadialFadeMaterial from '../shaders/RadialFadeMaterial';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getAbsoluteImageUrl(image) {\n  if (!image) return '';\n  if (image.startsWith('/uploads/')) {\n    var _process$env$REACT_AP;\n    return `${((_process$env$REACT_AP = process.env.REACT_APP_API_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.replace('/api', '')) || 'http://localhost:5000'}${image}`;\n  }\n  return image;\n}\nfunction TourViewer() {\n  _s();\n  const {\n    tourId\n  } = useParams();\n  const [tour, setTour] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const containerRef = useRef();\n  const navigate = useNavigate();\n  const cameraRef = useRef();\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  const [transitioning, setTransitioning] = useState(false);\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  const [prevTexture, setPrevTexture] = useState(null);\n  useEffect(() => {\n    const fetchTour = async () => {\n      try {\n        const response = await api.getTour(tourId);\n        setTour(response.data);\n        setLoading(false);\n      } catch (err) {\n        setError('No se pudo cargar el tour');\n        setLoading(false);\n      }\n    };\n    fetchTour();\n  }, [tourId]);\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Limpiar canvas anterior si existe\n    if (containerRef.current) {\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n    }\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    rendererRef.current = renderer;\n    containerRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    // Soporte de zoom con scroll del mouse\n    controls.enableZoom = true;\n    controls.minDistance = 0.05;\n    controls.maxDistance = 2.5;\n    // Limitar fov para evitar zoom extremo\n    renderer.domElement.addEventListener('wheel', e => {\n      e.preventDefault();\n      camera.fov = Math.max(30, Math.min(100, camera.fov + (e.deltaY > 0 ? 2 : -2)));\n      camera.updateProjectionMatrix();\n    }, {\n      passive: false\n    });\n\n    // Cargar escena actual\n    const loadScene = index => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(getAbsoluteImageUrl(sceneData.image), texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({\n                color: 0x38bdf8,\n                emissive: 0x0ea5e9,\n                metalness: 0.3,\n                roughness: 0.5\n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n    loadScene(currentSceneIndex);\n\n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                // Iniciar animación de transición\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n      if (renderer) {\n        renderer.dispose();\n        if (containerRef.current && renderer.domElement) containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Reemplazar startTransition para animar desplazamiento forward\n  function startTransition(targetIdx, directionVec = null) {\n    if (transitioning) return;\n    const scene = sceneRef.current;\n    const renderer = rendererRef.current;\n    const camera = cameraRef.current;\n    // Capturar textura de la escena actual\n    const renderTarget = new THREE.WebGLRenderTarget(renderer.domElement.width, renderer.domElement.height);\n    renderer.setRenderTarget(renderTarget);\n    renderer.render(scene, camera);\n    renderer.setRenderTarget(null);\n    setPrevTexture(renderTarget.texture);\n    setTransitioning(true);\n    setTransitionProgress(0);\n    setPendingSceneIndex(targetIdx);\n\n    // Calcular dirección hacia el hotspot destino si no se provee\n    let dir = directionVec;\n    if (!dir && tour && tour.scenes && tour.scenes[currentSceneIndex]) {\n      // Buscar el hotspot de acceso que lleva a targetIdx\n      const currentScene = tour.scenes[currentSceneIndex];\n      const targetScene = tour.scenes[targetIdx];\n      if (currentScene && targetScene && Array.isArray(currentScene.hotspots)) {\n        const accessHotspot = currentScene.hotspots.find(h => String(h.targetSceneId) === String(targetScene._id));\n        if (accessHotspot) {\n          // Calcular vector dirección desde pitch/yaw\n          const phi = THREE.MathUtils.degToRad(90 - accessHotspot.pitch);\n          const theta = THREE.MathUtils.degToRad(accessHotspot.yaw);\n          dir = new THREE.Vector3(Math.sin(phi) * Math.sin(theta), Math.cos(phi), Math.sin(phi) * Math.cos(theta)).normalize();\n        }\n      }\n    }\n    // Guardar dirección en ref para la animación\n    cameraRef.current.__transitionDirection = dir;\n  }\n\n  // Animar desplazamiento forward y mezcla de textura\n  useEffect(() => {\n    if (!transitioning) return;\n    const camera = cameraRef.current;\n    const dir = camera.__transitionDirection || new THREE.Vector3(0, 0, -1);\n    const startPos = new THREE.Vector3(0, 0, 0.1);\n    const forwardDist = 0.5; // Qué tanto se \"avanza\" (ajustable)\n    let frame;\n    function animate() {\n      setTransitionProgress(prev => {\n        const next = Math.min(prev + 0.035, 1);\n        // Movimiento hacia adelante y regreso\n        let t = next < 0.5 ? next * 2 : (1 - next) * 2;\n        const pos = startPos.clone().add(dir.clone().multiplyScalar(forwardDist * t));\n        camera.position.copy(pos);\n        camera.lookAt(0, 0, 0);\n        if (next < 1) {\n          frame = requestAnimationFrame(animate);\n        } else {\n          // Resetear cámara\n          camera.position.copy(startPos);\n          camera.lookAt(0, 0, 0);\n          setTransitioning(false);\n          setPrevTexture(null);\n          setCurrentSceneIndex(pendingSceneIndex);\n        }\n        return next;\n      });\n    }\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }, [transitioning]);\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n  useEffect(() => {\n    if (!sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n    if (!transitioning || !prevTexture) return;\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    const currentScene = tour.scenes[pendingSceneIndex];\n    const loader = new THREE.TextureLoader();\n    loader.load(getAbsoluteImageUrl(currentScene.image), nextTexture => {\n      const material = RadialFadeMaterial(prevTexture, nextTexture, transitionProgress);\n      const sphere = new THREE.Mesh(geometry, material);\n      sceneRef.current.add(sphere);\n      function renderTransition() {\n        material.uniforms.uProgress.value = transitionProgress;\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n        if (transitioning) requestAnimationFrame(renderTransition);else sceneRef.current.remove(sphere);\n      }\n      renderTransition();\n    });\n  }, [transitioning, transitionProgress]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewer-loading\",\n      children: \"Cargando tour...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewer-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 12\n    }, this);\n  }\n  if (!tour) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewer-error\",\n      children: \"Tour no encontrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tour-viewer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"three-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade-overlay${fade ? ' visible' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-return\",\n      onClick: () => navigate('/'),\n      children: \"Volver al mapa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 5\n  }, this);\n}\n_s(TourViewer, \"cgR2QathuJkCaS7fFQUif5RBtaA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TourViewer;\nexport default TourViewer;\nvar _c;\n$RefreshReg$(_c, \"TourViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","api","useParams","useNavigate","RadialFadeMaterial","jsxDEV","_jsxDEV","getAbsoluteImageUrl","image","startsWith","_process$env$REACT_AP","process","env","REACT_APP_API_URL","replace","TourViewer","_s","tourId","tour","setTour","loading","setLoading","error","setError","currentSceneIndex","setCurrentSceneIndex","fade","setFade","pendingSceneIndex","setPendingSceneIndex","containerRef","navigate","cameraRef","sceneRef","rendererRef","transitioning","setTransitioning","transitionProgress","setTransitionProgress","prevTexture","setPrevTexture","fetchTour","response","getTour","data","err","scenes","length","current","firstChild","removeChild","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableDamping","dampingFactor","enableZoom","minDistance","maxDistance","addEventListener","e","preventDefault","fov","Math","max","min","deltaY","updateProjectionMatrix","passive","loadScene","index","children","remove","sceneData","geometry","SphereGeometry","scale","textureLoader","TextureLoader","load","texture","minFilter","LinearFilter","magFilter","colorSpace","undefined","LinearSRGBColorSpace","material","MeshBasicMaterial","map","side","DoubleSide","sphere","Mesh","add","Array","isArray","hotspots","forEach","hotspot","type","radius","phi","MathUtils","degToRad","pitch","theta","yaw","x","sin","y","cos","z","hGeo","hMat","MeshStandardMaterial","color","emissive","metalness","roughness","hMesh","userData","isAccessHotspot","hoveredObj","animate","requestAnimationFrame","accessSpheres","traverse","obj","push","t","Date","now","update","render","lastClickTime","dom","getAccessSpheres","arr","onPointerDown","event","button","rect","getBoundingClientRect","mouse","Vector2","clientX","left","width","clientY","top","height","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","object","targetSceneId","idx","findIndex","s","String","_id","startTransition","onPointerMove","style","cursor","handleResize","aspect","removeEventListener","dispose","targetIdx","directionVec","renderTarget","WebGLRenderTarget","setRenderTarget","dir","currentScene","targetScene","accessHotspot","find","h","Vector3","normalize","__transitionDirection","startPos","forwardDist","frame","prev","next","pos","clone","multiplyScalar","copy","lookAt","cancelAnimationFrame","startFov","endFov","duration","start","animateZoomOut","ts","progress","setTimeout","loader","nextTexture","renderTransition","uniforms","uProgress","value","className","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/Viewer/TourViewer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport api from '../../services/api';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './TourViewer.css';\nimport RadialFadeMaterial from '../shaders/RadialFadeMaterial';\n\nfunction getAbsoluteImageUrl(image) {\n  if (!image) return '';\n  if (image.startsWith('/uploads/')) {\n    return `${process.env.REACT_APP_API_URL?.replace('/api', '') || 'http://localhost:5000'}${image}`;\n  }\n  return image;\n}\n\nfunction TourViewer() {\n  const { tourId } = useParams();\n  const [tour, setTour] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const containerRef = useRef();\n  const navigate = useNavigate();\n  const cameraRef = useRef();\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  const [transitioning, setTransitioning] = useState(false);\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  const [prevTexture, setPrevTexture] = useState(null);\n\n  useEffect(() => {\n    const fetchTour = async () => {\n      try {\n        const response = await api.getTour(tourId);\n        setTour(response.data);\n        setLoading(false);\n      } catch (err) {\n        setError('No se pudo cargar el tour');\n        setLoading(false);\n      }\n    };\n    fetchTour();\n  }, [tourId]);\n\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Limpiar canvas anterior si existe\n    if (containerRef.current) {\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n    }\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    rendererRef.current = renderer;\n    containerRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    // Soporte de zoom con scroll del mouse\n    controls.enableZoom = true;\n    controls.minDistance = 0.05;\n    controls.maxDistance = 2.5;\n    // Limitar fov para evitar zoom extremo\n    renderer.domElement.addEventListener('wheel', (e) => {\n      e.preventDefault();\n      camera.fov = Math.max(30, Math.min(100, camera.fov + (e.deltaY > 0 ? 2 : -2)));\n      camera.updateProjectionMatrix();\n    }, { passive: false });\n\n    // Cargar escena actual\n    const loadScene = (index) => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(getAbsoluteImageUrl(sceneData.image), texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({ color: 0x38bdf8, emissive: 0x0ea5e9, metalness: 0.3, roughness: 0.5 });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n\n    loadScene(currentSceneIndex);\n\n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                // Iniciar animación de transición\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n      if (renderer) {\n        renderer.dispose();\n        if (containerRef.current && renderer.domElement)\n          containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Reemplazar startTransition para animar desplazamiento forward\n  function startTransition(targetIdx, directionVec = null) {\n    if (transitioning) return;\n    const scene = sceneRef.current;\n    const renderer = rendererRef.current;\n    const camera = cameraRef.current;\n    // Capturar textura de la escena actual\n    const renderTarget = new THREE.WebGLRenderTarget(\n      renderer.domElement.width,\n      renderer.domElement.height\n    );\n    renderer.setRenderTarget(renderTarget);\n    renderer.render(scene, camera);\n    renderer.setRenderTarget(null);\n    setPrevTexture(renderTarget.texture);\n    setTransitioning(true);\n    setTransitionProgress(0);\n    setPendingSceneIndex(targetIdx);\n\n    // Calcular dirección hacia el hotspot destino si no se provee\n    let dir = directionVec;\n    if (!dir && tour && tour.scenes && tour.scenes[currentSceneIndex]) {\n      // Buscar el hotspot de acceso que lleva a targetIdx\n      const currentScene = tour.scenes[currentSceneIndex];\n      const targetScene = tour.scenes[targetIdx];\n      if (currentScene && targetScene && Array.isArray(currentScene.hotspots)) {\n        const accessHotspot = currentScene.hotspots.find(h => String(h.targetSceneId) === String(targetScene._id));\n        if (accessHotspot) {\n          // Calcular vector dirección desde pitch/yaw\n          const phi = THREE.MathUtils.degToRad(90 - accessHotspot.pitch);\n          const theta = THREE.MathUtils.degToRad(accessHotspot.yaw);\n          dir = new THREE.Vector3(\n            Math.sin(phi) * Math.sin(theta),\n            Math.cos(phi),\n            Math.sin(phi) * Math.cos(theta)\n          ).normalize();\n        }\n      }\n    }\n    // Guardar dirección en ref para la animación\n    cameraRef.current.__transitionDirection = dir;\n  }\n\n  // Animar desplazamiento forward y mezcla de textura\n  useEffect(() => {\n    if (!transitioning) return;\n    const camera = cameraRef.current;\n    const dir = camera.__transitionDirection || new THREE.Vector3(0, 0, -1);\n    const startPos = new THREE.Vector3(0, 0, 0.1);\n    const forwardDist = 0.5; // Qué tanto se \"avanza\" (ajustable)\n    let frame;\n    function animate() {\n      setTransitionProgress(prev => {\n        const next = Math.min(prev + 0.035, 1);\n        // Movimiento hacia adelante y regreso\n        let t = next < 0.5 ? next * 2 : (1 - next) * 2;\n        const pos = startPos.clone().add(dir.clone().multiplyScalar(forwardDist * t));\n        camera.position.copy(pos);\n        camera.lookAt(0, 0, 0);\n        if (next < 1) {\n          frame = requestAnimationFrame(animate);\n        } else {\n          // Resetear cámara\n          camera.position.copy(startPos);\n          camera.lookAt(0, 0, 0);\n          setTransitioning(false);\n          setPrevTexture(null);\n          setCurrentSceneIndex(pendingSceneIndex);\n        }\n        return next;\n      });\n    }\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }, [transitioning]);\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  useEffect(() => {\n    if (!sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n    if (!transitioning || !prevTexture) return;\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    const currentScene = tour.scenes[pendingSceneIndex];\n    const loader = new THREE.TextureLoader();\n    loader.load(getAbsoluteImageUrl(currentScene.image), nextTexture => {\n      const material = RadialFadeMaterial(prevTexture, nextTexture, transitionProgress);\n      const sphere = new THREE.Mesh(geometry, material);\n      sceneRef.current.add(sphere);\n      function renderTransition() {\n        material.uniforms.uProgress.value = transitionProgress;\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n        if (transitioning) requestAnimationFrame(renderTransition);\n        else sceneRef.current.remove(sphere);\n      }\n      renderTransition();\n    });\n  }, [transitioning, transitionProgress]);\n\n  if (loading) {\n    return <div className=\"viewer-loading\">Cargando tour...</div>;\n  }\n  if (error) {\n    return <div className=\"viewer-error\">{error}</div>;\n  }\n  if (!tour) {\n    return <div className=\"viewer-error\">Tour no encontrado</div>;\n  }\n\n  return (\n    <div className=\"tour-viewer-container\">\n      <div ref={containerRef} className=\"three-container\"></div>\n      <div className={`fade-overlay${fade ? ' visible' : ''}`}></div>\n      {/* Eliminar la sección de scene-selector para que no haya botones de navegación */}\n      <button className=\"btn-return\" onClick={() => navigate('/')}>Volver al mapa</button>\n    </div>\n  );\n}\n\nexport default TourViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}