{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpProxyMiddleware = void 0;\nconst httpProxy = require(\"http-proxy\");\nconst configuration_1 = require(\"./configuration\");\nconst get_plugins_1 = require(\"./get-plugins\");\nconst path_filter_1 = require(\"./path-filter\");\nconst PathRewriter = require(\"./path-rewriter\");\nconst Router = require(\"./router\");\nconst debug_1 = require(\"./debug\");\nconst function_1 = require(\"./utils/function\");\nconst logger_1 = require(\"./logger\");\nclass HttpProxyMiddleware {\n  constructor(options) {\n    this.wsInternalSubscribed = false;\n    this.serverOnCloseSubscribed = false;\n    // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n    this.middleware = async (req, res, next) => {\n      if (this.shouldProxy(this.proxyOptions.pathFilter, req)) {\n        try {\n          const activeProxyOptions = await this.prepareProxyRequest(req);\n          (0, debug_1.Debug)(`proxy request to target: %O`, activeProxyOptions.target);\n          this.proxy.web(req, res, activeProxyOptions);\n        } catch (err) {\n          next?.(err);\n        }\n      } else {\n        next?.();\n      }\n      /**\n       * Get the server object to subscribe to server events;\n       * 'upgrade' for websocket and 'close' for graceful shutdown\n       *\n       * NOTE:\n       * req.socket: node >= 13\n       * req.connection: node < 13 (Remove this when node 12/13 support is dropped)\n       */\n      const server = (req.socket ?? req.connection)?.server;\n      if (server && !this.serverOnCloseSubscribed) {\n        server.on('close', () => {\n          (0, debug_1.Debug)('server close signal received: closing proxy server');\n          this.proxy.close();\n        });\n        this.serverOnCloseSubscribed = true;\n      }\n      if (this.proxyOptions.ws === true) {\n        // use initial request to access the server object to subscribe to http upgrade event\n        this.catchUpgradeRequest(server);\n      }\n    };\n    this.catchUpgradeRequest = server => {\n      if (!this.wsInternalSubscribed) {\n        (0, debug_1.Debug)('subscribing to server upgrade event');\n        server.on('upgrade', this.handleUpgrade);\n        // prevent duplicate upgrade handling;\n        // in case external upgrade is also configured\n        this.wsInternalSubscribed = true;\n      }\n    };\n    this.handleUpgrade = async (req, socket, head) => {\n      try {\n        if (this.shouldProxy(this.proxyOptions.pathFilter, req)) {\n          const activeProxyOptions = await this.prepareProxyRequest(req);\n          this.proxy.ws(req, socket, head, activeProxyOptions);\n          (0, debug_1.Debug)('server upgrade event received. Proxying WebSocket');\n        }\n      } catch (err) {\n        // This error does not include the URL as the fourth argument as we won't\n        // have the URL if `this.prepareProxyRequest` throws an error.\n        this.proxy.emit('error', err, req, socket);\n      }\n    };\n    /**\n     * Determine whether request should be proxied.\n     */\n    this.shouldProxy = (pathFilter, req) => {\n      try {\n        return (0, path_filter_1.matchPathFilter)(pathFilter, req.url, req);\n      } catch (err) {\n        (0, debug_1.Debug)('Error: matchPathFilter() called with request url: ', `\"${req.url}\"`);\n        this.logger.error(err);\n        return false;\n      }\n    };\n    /**\n     * Apply option.router and option.pathRewrite\n     * Order matters:\n     *    Router uses original path for routing;\n     *    NOT the modified path, after it has been rewritten by pathRewrite\n     * @param {Object} req\n     * @return {Object} proxy options\n     */\n    this.prepareProxyRequest = async req => {\n      /**\n       * Incorrect usage confirmed: https://github.com/expressjs/express/issues/4854#issuecomment-1066171160\n       * Temporary restore req.url patch for {@link src/legacy/create-proxy-middleware.ts legacyCreateProxyMiddleware()}\n       * FIXME: remove this patch in future release\n       */\n      if (this.middleware.__LEGACY_HTTP_PROXY_MIDDLEWARE__) {\n        req.url = req.originalUrl || req.url;\n      }\n      const newProxyOptions = Object.assign({}, this.proxyOptions);\n      // Apply in order:\n      // 1. option.router\n      // 2. option.pathRewrite\n      await this.applyRouter(req, newProxyOptions);\n      await this.applyPathRewrite(req, this.pathRewriter);\n      return newProxyOptions;\n    };\n    // Modify option.target when router present.\n    this.applyRouter = async (req, options) => {\n      let newTarget;\n      if (options.router) {\n        newTarget = await Router.getTarget(req, options);\n        if (newTarget) {\n          (0, debug_1.Debug)('router new target: \"%s\"', newTarget);\n          options.target = newTarget;\n        }\n      }\n    };\n    // rewrite path\n    this.applyPathRewrite = async (req, pathRewriter) => {\n      if (pathRewriter) {\n        const path = await pathRewriter(req.url, req);\n        if (typeof path === 'string') {\n          (0, debug_1.Debug)('pathRewrite new path: %s', req.url);\n          req.url = path;\n        } else {\n          (0, debug_1.Debug)('pathRewrite: no rewritten path found: %s', req.url);\n        }\n      }\n    };\n    (0, configuration_1.verifyConfig)(options);\n    this.proxyOptions = options;\n    this.logger = (0, logger_1.getLogger)(options);\n    (0, debug_1.Debug)(`create proxy server`);\n    this.proxy = httpProxy.createProxyServer({});\n    this.registerPlugins(this.proxy, this.proxyOptions);\n    this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n    // https://github.com/chimurai/http-proxy-middleware/issues/19\n    // expose function to upgrade externally\n    this.middleware.upgrade = (req, socket, head) => {\n      if (!this.wsInternalSubscribed) {\n        this.handleUpgrade(req, socket, head);\n      }\n    };\n  }\n  registerPlugins(proxy, options) {\n    const plugins = (0, get_plugins_1.getPlugins)(options);\n    plugins.forEach(plugin => {\n      (0, debug_1.Debug)(`register plugin: \"${(0, function_1.getFunctionName)(plugin)}\"`);\n      plugin(proxy, options);\n    });\n  }\n}\nexports.HttpProxyMiddleware = HttpProxyMiddleware;","map":{"version":3,"names":["Object","defineProperty","exports","value","HttpProxyMiddleware","httpProxy","require","configuration_1","get_plugins_1","path_filter_1","PathRewriter","Router","debug_1","function_1","logger_1","constructor","options","wsInternalSubscribed","serverOnCloseSubscribed","middleware","req","res","next","shouldProxy","proxyOptions","pathFilter","activeProxyOptions","prepareProxyRequest","Debug","target","proxy","web","err","server","socket","connection","on","close","ws","catchUpgradeRequest","handleUpgrade","head","emit","matchPathFilter","url","logger","error","__LEGACY_HTTP_PROXY_MIDDLEWARE__","originalUrl","newProxyOptions","assign","applyRouter","applyPathRewrite","pathRewriter","newTarget","router","getTarget","path","verifyConfig","getLogger","createProxyServer","registerPlugins","createPathRewriter","pathRewrite","upgrade","plugins","getPlugins","forEach","plugin","getFunctionName"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/node_modules/http-proxy-middleware/dist/http-proxy-middleware.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpProxyMiddleware = void 0;\nconst httpProxy = require(\"http-proxy\");\nconst configuration_1 = require(\"./configuration\");\nconst get_plugins_1 = require(\"./get-plugins\");\nconst path_filter_1 = require(\"./path-filter\");\nconst PathRewriter = require(\"./path-rewriter\");\nconst Router = require(\"./router\");\nconst debug_1 = require(\"./debug\");\nconst function_1 = require(\"./utils/function\");\nconst logger_1 = require(\"./logger\");\nclass HttpProxyMiddleware {\n    constructor(options) {\n        this.wsInternalSubscribed = false;\n        this.serverOnCloseSubscribed = false;\n        // https://github.com/Microsoft/TypeScript/wiki/'this'-in-TypeScript#red-flags-for-this\n        this.middleware = (async (req, res, next) => {\n            if (this.shouldProxy(this.proxyOptions.pathFilter, req)) {\n                try {\n                    const activeProxyOptions = await this.prepareProxyRequest(req);\n                    (0, debug_1.Debug)(`proxy request to target: %O`, activeProxyOptions.target);\n                    this.proxy.web(req, res, activeProxyOptions);\n                }\n                catch (err) {\n                    next?.(err);\n                }\n            }\n            else {\n                next?.();\n            }\n            /**\n             * Get the server object to subscribe to server events;\n             * 'upgrade' for websocket and 'close' for graceful shutdown\n             *\n             * NOTE:\n             * req.socket: node >= 13\n             * req.connection: node < 13 (Remove this when node 12/13 support is dropped)\n             */\n            const server = (req.socket ?? req.connection)?.server;\n            if (server && !this.serverOnCloseSubscribed) {\n                server.on('close', () => {\n                    (0, debug_1.Debug)('server close signal received: closing proxy server');\n                    this.proxy.close();\n                });\n                this.serverOnCloseSubscribed = true;\n            }\n            if (this.proxyOptions.ws === true) {\n                // use initial request to access the server object to subscribe to http upgrade event\n                this.catchUpgradeRequest(server);\n            }\n        });\n        this.catchUpgradeRequest = (server) => {\n            if (!this.wsInternalSubscribed) {\n                (0, debug_1.Debug)('subscribing to server upgrade event');\n                server.on('upgrade', this.handleUpgrade);\n                // prevent duplicate upgrade handling;\n                // in case external upgrade is also configured\n                this.wsInternalSubscribed = true;\n            }\n        };\n        this.handleUpgrade = async (req, socket, head) => {\n            try {\n                if (this.shouldProxy(this.proxyOptions.pathFilter, req)) {\n                    const activeProxyOptions = await this.prepareProxyRequest(req);\n                    this.proxy.ws(req, socket, head, activeProxyOptions);\n                    (0, debug_1.Debug)('server upgrade event received. Proxying WebSocket');\n                }\n            }\n            catch (err) {\n                // This error does not include the URL as the fourth argument as we won't\n                // have the URL if `this.prepareProxyRequest` throws an error.\n                this.proxy.emit('error', err, req, socket);\n            }\n        };\n        /**\n         * Determine whether request should be proxied.\n         */\n        this.shouldProxy = (pathFilter, req) => {\n            try {\n                return (0, path_filter_1.matchPathFilter)(pathFilter, req.url, req);\n            }\n            catch (err) {\n                (0, debug_1.Debug)('Error: matchPathFilter() called with request url: ', `\"${req.url}\"`);\n                this.logger.error(err);\n                return false;\n            }\n        };\n        /**\n         * Apply option.router and option.pathRewrite\n         * Order matters:\n         *    Router uses original path for routing;\n         *    NOT the modified path, after it has been rewritten by pathRewrite\n         * @param {Object} req\n         * @return {Object} proxy options\n         */\n        this.prepareProxyRequest = async (req) => {\n            /**\n             * Incorrect usage confirmed: https://github.com/expressjs/express/issues/4854#issuecomment-1066171160\n             * Temporary restore req.url patch for {@link src/legacy/create-proxy-middleware.ts legacyCreateProxyMiddleware()}\n             * FIXME: remove this patch in future release\n             */\n            if (this.middleware.__LEGACY_HTTP_PROXY_MIDDLEWARE__) {\n                req.url = req.originalUrl || req.url;\n            }\n            const newProxyOptions = Object.assign({}, this.proxyOptions);\n            // Apply in order:\n            // 1. option.router\n            // 2. option.pathRewrite\n            await this.applyRouter(req, newProxyOptions);\n            await this.applyPathRewrite(req, this.pathRewriter);\n            return newProxyOptions;\n        };\n        // Modify option.target when router present.\n        this.applyRouter = async (req, options) => {\n            let newTarget;\n            if (options.router) {\n                newTarget = await Router.getTarget(req, options);\n                if (newTarget) {\n                    (0, debug_1.Debug)('router new target: \"%s\"', newTarget);\n                    options.target = newTarget;\n                }\n            }\n        };\n        // rewrite path\n        this.applyPathRewrite = async (req, pathRewriter) => {\n            if (pathRewriter) {\n                const path = await pathRewriter(req.url, req);\n                if (typeof path === 'string') {\n                    (0, debug_1.Debug)('pathRewrite new path: %s', req.url);\n                    req.url = path;\n                }\n                else {\n                    (0, debug_1.Debug)('pathRewrite: no rewritten path found: %s', req.url);\n                }\n            }\n        };\n        (0, configuration_1.verifyConfig)(options);\n        this.proxyOptions = options;\n        this.logger = (0, logger_1.getLogger)(options);\n        (0, debug_1.Debug)(`create proxy server`);\n        this.proxy = httpProxy.createProxyServer({});\n        this.registerPlugins(this.proxy, this.proxyOptions);\n        this.pathRewriter = PathRewriter.createPathRewriter(this.proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n        // https://github.com/chimurai/http-proxy-middleware/issues/19\n        // expose function to upgrade externally\n        this.middleware.upgrade = (req, socket, head) => {\n            if (!this.wsInternalSubscribed) {\n                this.handleUpgrade(req, socket, head);\n            }\n        };\n    }\n    registerPlugins(proxy, options) {\n        const plugins = (0, get_plugins_1.getPlugins)(options);\n        plugins.forEach((plugin) => {\n            (0, debug_1.Debug)(`register plugin: \"${(0, function_1.getFunctionName)(plugin)}\"`);\n            plugin(proxy, options);\n        });\n    }\n}\nexports.HttpProxyMiddleware = HttpProxyMiddleware;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}