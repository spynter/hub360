{"ast":null,"code":"import * as THREE from 'three';\nexport default function RadialFadeMaterial(prevTexture, nextTexture, progress) {\n  return new THREE.ShaderMaterial({\n    uniforms: {\n      uPrev: {\n        value: prevTexture\n      },\n      uNext: {\n        value: nextTexture\n      },\n      uProgress: {\n        value: progress\n      },\n      uResolution: {\n        value: new THREE.Vector2(1, 1)\n      }\n    },\n    vertexShader: `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform sampler2D uPrev;\n      uniform sampler2D uNext;\n      uniform float uProgress;\n      varying vec2 vUv;\n      \n      void main() {\n        // Transición de desplazamiento hacia adelante\n        // La imagen actual se desvanece hacia adelante (zoom out + fade)\n        // La nueva imagen aparece desde atrás (zoom in + fade in)\n        \n        vec2 center = vec2(0.5, 0.5);\n        float dist = distance(vUv, center);\n        \n        // Efecto de desplazamiento hacia adelante para la imagen actual\n        float currentImageFade = 1.0 - smoothstep(0.0, 0.7, uProgress);\n        \n        // Efecto de aparición desde atrás para la nueva imagen\n        float newImageFade = smoothstep(0.3, 1.0, uProgress);\n        \n        // Coordenadas UV con efecto de desplazamiento hacia adelante\n        vec2 offset = (vUv - center) * (1.0 + uProgress * 0.4);\n        vec2 newUv = center + offset;\n        \n        // Verificar que las coordenadas estén dentro de los límites\n        if (newUv.x < 0.0 || newUv.x > 1.0 || newUv.y < 0.0 || newUv.y > 1.0) {\n          newUv = vUv; // Usar coordenadas originales si están fuera de rango\n        }\n        \n        // Muestrear las texturas\n        vec4 prevColor = texture2D(uPrev, vUv);\n        vec4 nextColor = texture2D(uNext, newUv);\n        \n        // Aplicar efectos de transición con easing suave\n        float blend = mix(currentImageFade, newImageFade, uProgress);\n        \n        // Combinar las imágenes con el efecto de desplazamiento\n        gl_FragColor = mix(prevColor, nextColor, blend);\n      }\n    `,\n    transparent: false,\n    depthTest: false,\n    depthWrite: false\n  });\n}\n_c = RadialFadeMaterial;\nvar _c;\n$RefreshReg$(_c, \"RadialFadeMaterial\");","map":{"version":3,"names":["THREE","RadialFadeMaterial","prevTexture","nextTexture","progress","ShaderMaterial","uniforms","uPrev","value","uNext","uProgress","uResolution","Vector2","vertexShader","fragmentShader","transparent","depthTest","depthWrite","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/shaders/RadialFadeMaterial.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\nexport default function RadialFadeMaterial(prevTexture, nextTexture, progress) {\r\n  return new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      uPrev: { value: prevTexture },\r\n      uNext: { value: nextTexture },\r\n      uProgress: { value: progress },\r\n      uResolution: { value: new THREE.Vector2(1, 1) },\r\n    },\r\n    vertexShader: `\r\n      varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n      uniform sampler2D uPrev;\r\n      uniform sampler2D uNext;\r\n      uniform float uProgress;\r\n      varying vec2 vUv;\r\n      \r\n      void main() {\r\n        // Transición de desplazamiento hacia adelante\r\n        // La imagen actual se desvanece hacia adelante (zoom out + fade)\r\n        // La nueva imagen aparece desde atrás (zoom in + fade in)\r\n        \r\n        vec2 center = vec2(0.5, 0.5);\r\n        float dist = distance(vUv, center);\r\n        \r\n        // Efecto de desplazamiento hacia adelante para la imagen actual\r\n        float currentImageFade = 1.0 - smoothstep(0.0, 0.7, uProgress);\r\n        \r\n        // Efecto de aparición desde atrás para la nueva imagen\r\n        float newImageFade = smoothstep(0.3, 1.0, uProgress);\r\n        \r\n        // Coordenadas UV con efecto de desplazamiento hacia adelante\r\n        vec2 offset = (vUv - center) * (1.0 + uProgress * 0.4);\r\n        vec2 newUv = center + offset;\r\n        \r\n        // Verificar que las coordenadas estén dentro de los límites\r\n        if (newUv.x < 0.0 || newUv.x > 1.0 || newUv.y < 0.0 || newUv.y > 1.0) {\r\n          newUv = vUv; // Usar coordenadas originales si están fuera de rango\r\n        }\r\n        \r\n        // Muestrear las texturas\r\n        vec4 prevColor = texture2D(uPrev, vUv);\r\n        vec4 nextColor = texture2D(uNext, newUv);\r\n        \r\n        // Aplicar efectos de transición con easing suave\r\n        float blend = mix(currentImageFade, newImageFade, uProgress);\r\n        \r\n        // Combinar las imágenes con el efecto de desplazamiento\r\n        gl_FragColor = mix(prevColor, nextColor, blend);\r\n      }\r\n    `,\r\n    transparent: false,\r\n    depthTest: false,\r\n    depthWrite: false,\r\n  });\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,eAAe,SAASC,kBAAkBA,CAACC,WAAW,EAAEC,WAAW,EAAEC,QAAQ,EAAE;EAC7E,OAAO,IAAIJ,KAAK,CAACK,cAAc,CAAC;IAC9BC,QAAQ,EAAE;MACRC,KAAK,EAAE;QAAEC,KAAK,EAAEN;MAAY,CAAC;MAC7BO,KAAK,EAAE;QAAED,KAAK,EAAEL;MAAY,CAAC;MAC7BO,SAAS,EAAE;QAAEF,KAAK,EAAEJ;MAAS,CAAC;MAC9BO,WAAW,EAAE;QAAEH,KAAK,EAAE,IAAIR,KAAK,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC;MAAE;IAChD,CAAC;IACDC,YAAY,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,WAAW,EAAE,KAAK;IAClBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE;EACd,CAAC,CAAC;AACJ;AAACC,EAAA,GA3DuBjB,kBAAkB;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}