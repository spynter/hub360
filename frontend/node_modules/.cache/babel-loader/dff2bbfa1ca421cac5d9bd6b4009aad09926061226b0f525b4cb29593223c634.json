{"ast":null,"code":"import * as THREE from 'three';\nimport RadialFadeMaterial from '../components/shaders/RadialFadeMaterial';\nclass TransitionManager {\n  constructor() {\n    this.isTransitioning = false;\n    this.transitionProgress = 0;\n    this.prevTexture = null;\n    this.nextTexture = null;\n    this.transitionMaterial = null;\n    this.transitionMesh = null;\n    this.onTransitionComplete = null;\n    this.animationFrame = null;\n  }\n\n  // Iniciar transición entre escenas\n  startTransition(scene, camera, renderer, currentTexture, nextImageUrl, onComplete) {\n    if (this.isTransitioning) return;\n    this.isTransitioning = true;\n    this.transitionProgress = 0;\n    this.onTransitionComplete = onComplete;\n\n    // Capturar la textura actual\n    const renderTarget = new THREE.WebGLRenderTarget(renderer.domElement.width, renderer.domElement.height);\n    renderer.setRenderTarget(renderTarget);\n    renderer.render(scene, camera);\n    renderer.setRenderTarget(null);\n    this.prevTexture = renderTarget.texture;\n\n    // Cargar la siguiente textura\n    const textureLoader = new THREE.TextureLoader();\n    textureLoader.load(nextImageUrl, nextTexture => {\n      nextTexture.minFilter = THREE.LinearFilter;\n      nextTexture.magFilter = THREE.LinearFilter;\n      if (nextTexture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n        nextTexture.colorSpace = THREE.LinearSRGBColorSpace;\n      }\n      this.nextTexture = nextTexture;\n      this.setupTransitionMesh(scene);\n      this.animateTransition(renderer, scene, camera);\n    });\n  }\n\n  // Configurar el mesh de transición\n  setupTransitionMesh(scene) {\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    this.transitionMaterial = RadialFadeMaterial(this.prevTexture, this.nextTexture, 0);\n    this.transitionMesh = new THREE.Mesh(geometry, this.transitionMaterial);\n\n    // Limpiar escena actual\n    while (scene.children.length > 0) {\n      const child = scene.children[0];\n      if (child.geometry) child.geometry.dispose();\n      if (child.material) {\n        if (Array.isArray(child.material)) {\n          child.material.forEach(mat => mat.dispose());\n        } else {\n          child.material.dispose();\n        }\n      }\n      scene.remove(child);\n    }\n    scene.add(this.transitionMesh);\n  }\n\n  // Animar la transición\n  animateTransition(renderer, scene, camera) {\n    const animate = () => {\n      this.transitionProgress += 0.02; // Velocidad de transición\n\n      if (this.transitionMaterial && this.transitionMaterial.uniforms) {\n        this.transitionMaterial.uniforms.uProgress.value = this.transitionProgress;\n        this.transitionMaterial.uniforms.uTime.value = performance.now() * 0.001;\n      }\n      renderer.render(scene, camera);\n      if (this.transitionProgress < 1.0) {\n        this.animationFrame = requestAnimationFrame(animate);\n      } else {\n        this.completeTransition(scene);\n      }\n    };\n    animate();\n  }\n\n  // Completar la transición\n  completeTransition(scene) {\n    this.isTransitioning = false;\n    if (this.transitionMesh) {\n      scene.remove(this.transitionMesh);\n      this.transitionMesh.geometry.dispose();\n      this.transitionMaterial.dispose();\n      this.transitionMesh = null;\n      this.transitionMaterial = null;\n    }\n    if (this.prevTexture) {\n      this.prevTexture.dispose();\n      this.prevTexture = null;\n    }\n    if (this.nextTexture) {\n      this.nextTexture = null;\n    }\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n    if (this.onTransitionComplete) {\n      this.onTransitionComplete();\n    }\n  }\n\n  // Efecto de zoom suave para la cámara\n  animateCameraZoom(camera, targetFOV, duration = 500) {\n    return new Promise(resolve => {\n      const startFOV = camera.fov;\n      const startTime = performance.now();\n      const animate = currentTime => {\n        const elapsed = currentTime - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n\n        // Easing suave\n        const easedProgress = this.easeInOutCubic(progress);\n        camera.fov = startFOV + (targetFOV - startFOV) * easedProgress;\n        camera.updateProjectionMatrix();\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          resolve();\n        }\n      };\n      requestAnimationFrame(animate);\n    });\n  }\n\n  // Función de easing cúbica\n  easeInOutCubic(t) {\n    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n  }\n\n  // Limpiar recursos\n  dispose() {\n    if (this.isTransitioning) {\n      this.completeTransition();\n    }\n    if (this.prevTexture) {\n      this.prevTexture.dispose();\n    }\n    if (this.transitionMaterial) {\n      this.transitionMaterial.dispose();\n    }\n  }\n}\nexport default TransitionManager;","map":{"version":3,"names":["THREE","RadialFadeMaterial","TransitionManager","constructor","isTransitioning","transitionProgress","prevTexture","nextTexture","transitionMaterial","transitionMesh","onTransitionComplete","animationFrame","startTransition","scene","camera","renderer","currentTexture","nextImageUrl","onComplete","renderTarget","WebGLRenderTarget","domElement","width","height","setRenderTarget","render","texture","textureLoader","TextureLoader","load","minFilter","LinearFilter","magFilter","colorSpace","undefined","LinearSRGBColorSpace","setupTransitionMesh","animateTransition","geometry","SphereGeometry","scale","Mesh","children","length","child","dispose","material","Array","isArray","forEach","mat","remove","add","animate","uniforms","uProgress","value","uTime","performance","now","requestAnimationFrame","completeTransition","cancelAnimationFrame","animateCameraZoom","targetFOV","duration","Promise","resolve","startFOV","fov","startTime","currentTime","elapsed","progress","Math","min","easedProgress","easeInOutCubic","updateProjectionMatrix","t","pow"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/utils/transitionManager.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport RadialFadeMaterial from '../components/shaders/RadialFadeMaterial';\r\n\r\nclass TransitionManager {\r\n  constructor() {\r\n    this.isTransitioning = false;\r\n    this.transitionProgress = 0;\r\n    this.prevTexture = null;\r\n    this.nextTexture = null;\r\n    this.transitionMaterial = null;\r\n    this.transitionMesh = null;\r\n    this.onTransitionComplete = null;\r\n    this.animationFrame = null;\r\n  }\r\n\r\n  // Iniciar transición entre escenas\r\n  startTransition(scene, camera, renderer, currentTexture, nextImageUrl, onComplete) {\r\n    if (this.isTransitioning) return;\r\n    \r\n    this.isTransitioning = true;\r\n    this.transitionProgress = 0;\r\n    this.onTransitionComplete = onComplete;\r\n\r\n    // Capturar la textura actual\r\n    const renderTarget = new THREE.WebGLRenderTarget(\r\n      renderer.domElement.width,\r\n      renderer.domElement.height\r\n    );\r\n    renderer.setRenderTarget(renderTarget);\r\n    renderer.render(scene, camera);\r\n    renderer.setRenderTarget(null);\r\n    \r\n    this.prevTexture = renderTarget.texture;\r\n\r\n    // Cargar la siguiente textura\r\n    const textureLoader = new THREE.TextureLoader();\r\n    textureLoader.load(nextImageUrl, (nextTexture) => {\r\n      nextTexture.minFilter = THREE.LinearFilter;\r\n      nextTexture.magFilter = THREE.LinearFilter;\r\n      if (nextTexture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\r\n        nextTexture.colorSpace = THREE.LinearSRGBColorSpace;\r\n      }\r\n      \r\n      this.nextTexture = nextTexture;\r\n      this.setupTransitionMesh(scene);\r\n      this.animateTransition(renderer, scene, camera);\r\n    });\r\n  }\r\n\r\n  // Configurar el mesh de transición\r\n  setupTransitionMesh(scene) {\r\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\r\n    geometry.scale(-1, 1, 1);\r\n    \r\n    this.transitionMaterial = RadialFadeMaterial(this.prevTexture, this.nextTexture, 0);\r\n    this.transitionMesh = new THREE.Mesh(geometry, this.transitionMaterial);\r\n    \r\n    // Limpiar escena actual\r\n    while (scene.children.length > 0) {\r\n      const child = scene.children[0];\r\n      if (child.geometry) child.geometry.dispose();\r\n      if (child.material) {\r\n        if (Array.isArray(child.material)) {\r\n          child.material.forEach(mat => mat.dispose());\r\n        } else {\r\n          child.material.dispose();\r\n        }\r\n      }\r\n      scene.remove(child);\r\n    }\r\n    \r\n    scene.add(this.transitionMesh);\r\n  }\r\n\r\n  // Animar la transición\r\n  animateTransition(renderer, scene, camera) {\r\n    const animate = () => {\r\n      this.transitionProgress += 0.02; // Velocidad de transición\r\n      \r\n      if (this.transitionMaterial && this.transitionMaterial.uniforms) {\r\n        this.transitionMaterial.uniforms.uProgress.value = this.transitionProgress;\r\n        this.transitionMaterial.uniforms.uTime.value = performance.now() * 0.001;\r\n      }\r\n      \r\n      renderer.render(scene, camera);\r\n      \r\n      if (this.transitionProgress < 1.0) {\r\n        this.animationFrame = requestAnimationFrame(animate);\r\n      } else {\r\n        this.completeTransition(scene);\r\n      }\r\n    };\r\n    \r\n    animate();\r\n  }\r\n\r\n  // Completar la transición\r\n  completeTransition(scene) {\r\n    this.isTransitioning = false;\r\n    \r\n    if (this.transitionMesh) {\r\n      scene.remove(this.transitionMesh);\r\n      this.transitionMesh.geometry.dispose();\r\n      this.transitionMaterial.dispose();\r\n      this.transitionMesh = null;\r\n      this.transitionMaterial = null;\r\n    }\r\n    \r\n    if (this.prevTexture) {\r\n      this.prevTexture.dispose();\r\n      this.prevTexture = null;\r\n    }\r\n    \r\n    if (this.nextTexture) {\r\n      this.nextTexture = null;\r\n    }\r\n    \r\n    if (this.animationFrame) {\r\n      cancelAnimationFrame(this.animationFrame);\r\n      this.animationFrame = null;\r\n    }\r\n    \r\n    if (this.onTransitionComplete) {\r\n      this.onTransitionComplete();\r\n    }\r\n  }\r\n\r\n  // Efecto de zoom suave para la cámara\r\n  animateCameraZoom(camera, targetFOV, duration = 500) {\r\n    return new Promise((resolve) => {\r\n      const startFOV = camera.fov;\r\n      const startTime = performance.now();\r\n      \r\n      const animate = (currentTime) => {\r\n        const elapsed = currentTime - startTime;\r\n        const progress = Math.min(elapsed / duration, 1);\r\n        \r\n        // Easing suave\r\n        const easedProgress = this.easeInOutCubic(progress);\r\n        camera.fov = startFOV + (targetFOV - startFOV) * easedProgress;\r\n        camera.updateProjectionMatrix();\r\n        \r\n        if (progress < 1) {\r\n          requestAnimationFrame(animate);\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n      \r\n      requestAnimationFrame(animate);\r\n    });\r\n  }\r\n\r\n  // Función de easing cúbica\r\n  easeInOutCubic(t) {\r\n    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\r\n  }\r\n\r\n  // Limpiar recursos\r\n  dispose() {\r\n    if (this.isTransitioning) {\r\n      this.completeTransition();\r\n    }\r\n    \r\n    if (this.prevTexture) {\r\n      this.prevTexture.dispose();\r\n    }\r\n    \r\n    if (this.transitionMaterial) {\r\n      this.transitionMaterial.dispose();\r\n    }\r\n  }\r\n}\r\n\r\nexport default TransitionManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}