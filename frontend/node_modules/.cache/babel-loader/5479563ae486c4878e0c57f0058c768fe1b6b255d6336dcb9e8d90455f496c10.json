{"ast":null,"code":"var _jsxFileName = \"D:\\\\respaldo jose\\\\PROJECTS_V0\\\\hub360\\\\frontend\\\\src\\\\components\\\\Viewer\\\\TourViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport api from '../../services/api';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './TourViewer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getAbsoluteImageUrl(image) {\n  if (!image) return '';\n  if (image.startsWith('/uploads/')) {\n    var _process$env$REACT_AP;\n    return `${((_process$env$REACT_AP = process.env.REACT_APP_API_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.replace('/api', '')) || 'http://localhost:5000'}${image}`;\n  }\n  return image;\n}\nfunction TourViewer() {\n  _s();\n  const {\n    tourId\n  } = useParams();\n  const [tour, setTour] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const containerRef = useRef();\n  const navigate = useNavigate();\n  const cameraRef = useRef();\n  const sceneRef = useRef(); // Ref para la escena actual\n  const rendererRef = useRef(); // Ref para el renderer\n\n  useEffect(() => {\n    const fetchTour = async () => {\n      try {\n        const response = await api.getTour(tourId);\n        setTour(response.data);\n        setLoading(false);\n      } catch (err) {\n        setError('No se pudo cargar el tour');\n        setLoading(false);\n      }\n    };\n    fetchTour();\n  }, [tourId]);\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Limpiar canvas anterior si existe\n    if (containerRef.current) {\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n    }\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    // Soporte de zoom con scroll del mouse\n    controls.enableZoom = true;\n    controls.minDistance = 0.05;\n    controls.maxDistance = 2.5;\n    // Limitar fov para evitar zoom extremo\n    renderer.domElement.addEventListener('wheel', e => {\n      e.preventDefault();\n      camera.fov = Math.max(30, Math.min(100, camera.fov + (e.deltaY > 0 ? 2 : -2)));\n      camera.updateProjectionMatrix();\n    }, {\n      passive: false\n    });\n\n    // Cargar escena actual\n    const loadScene = index => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(getAbsoluteImageUrl(sceneData.image), texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({\n                color: 0x38bdf8,\n                emissive: 0x0ea5e9,\n                metalness: 0.3,\n                roughness: 0.5\n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n    loadScene(currentSceneIndex);\n\n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                // Iniciar animación de transición\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n      if (renderer) {\n        renderer.dispose();\n        if (containerRef.current && renderer.domElement) containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Reemplazar la función startTransition y la lógica de cambio de escena por un cross-fade\n  function startTransition(targetIdx) {\n    if (fade) return; // Evitar doble trigger\n    setFade(true);\n    setPendingSceneIndex(targetIdx);\n    const scene = sceneRef.current || window._sceneRef && window._sceneRef.current;\n    const camera = cameraRef.current;\n    const renderer = scene && scene.renderer || window._rendererRef && window._rendererRef.current;\n    if (!scene || !camera || !renderer) return;\n    // Obtener la textura actual\n    const currentScene = tour.scenes[currentSceneIndex];\n    const nextScene = tour.scenes[targetIdx];\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    // Buscar la esfera actual\n    let oldSphere = null;\n    scene.traverse(obj => {\n      if (obj.isMesh && obj.material && obj.material.map) {\n        oldSphere = obj;\n      }\n    });\n    // Precargar la textura nueva\n    const textureLoader = new THREE.TextureLoader();\n    let imageUrl = getAbsoluteImageUrl(nextScene.image);\n    textureLoader.load(imageUrl, newTexture => {\n      newTexture.minFilter = THREE.LinearFilter;\n      newTexture.magFilter = THREE.LinearFilter;\n      if (newTexture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n        newTexture.colorSpace = THREE.LinearSRGBColorSpace;\n      }\n      // Crear esfera nueva encima de la anterior\n      const newMaterial = new THREE.MeshBasicMaterial({\n        map: newTexture,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0\n      });\n      const newSphere = new THREE.Mesh(geometry, newMaterial);\n      scene.add(newSphere);\n      // Animar opacidad (cross-fade)\n      let progress = 0;\n      const duration = 600; // ms\n      const animateFade = (tsStart => function step(ts) {\n        if (!tsStart) tsStart = ts;\n        progress = Math.min((ts - tsStart) / duration, 1);\n        if (oldSphere && oldSphere.material) oldSphere.material.opacity = 1 - progress;\n        newMaterial.opacity = progress;\n        renderer.render(scene, camera);\n        if (progress < 1) {\n          requestAnimationFrame(step);\n        } else {\n          // Quitar la esfera anterior y dejar la nueva\n          if (oldSphere) scene.remove(oldSphere);\n          setCurrentSceneIndex(targetIdx);\n          setFade(false);\n          setPendingSceneIndex(null);\n        }\n      })(null);\n      requestAnimationFrame(animateFade);\n    });\n  }\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewer-loading\",\n      children: \"Cargando tour...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewer-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 12\n    }, this);\n  }\n  if (!tour) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewer-error\",\n      children: \"Tour no encontrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tour-viewer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"three-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fade-overlay${fade ? ' visible' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-return\",\n      onClick: () => navigate('/'),\n      children: \"Volver al mapa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n}\n_s(TourViewer, \"SAFvcs8TwOFOh6Zlhv5BhZrU8/M=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TourViewer;\nexport default TourViewer;\nvar _c;\n$RefreshReg$(_c, \"TourViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","api","useParams","useNavigate","jsxDEV","_jsxDEV","getAbsoluteImageUrl","image","startsWith","_process$env$REACT_AP","process","env","REACT_APP_API_URL","replace","TourViewer","_s","tourId","tour","setTour","loading","setLoading","error","setError","currentSceneIndex","setCurrentSceneIndex","fade","setFade","pendingSceneIndex","setPendingSceneIndex","containerRef","navigate","cameraRef","sceneRef","rendererRef","fetchTour","response","getTour","data","err","scenes","length","current","firstChild","removeChild","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableDamping","dampingFactor","enableZoom","minDistance","maxDistance","addEventListener","e","preventDefault","fov","Math","max","min","deltaY","updateProjectionMatrix","passive","loadScene","index","children","remove","sceneData","geometry","SphereGeometry","scale","textureLoader","TextureLoader","load","texture","minFilter","LinearFilter","magFilter","colorSpace","undefined","LinearSRGBColorSpace","material","MeshBasicMaterial","map","side","DoubleSide","sphere","Mesh","add","Array","isArray","hotspots","forEach","hotspot","type","radius","phi","MathUtils","degToRad","pitch","theta","yaw","x","sin","y","cos","z","hGeo","hMat","MeshStandardMaterial","color","emissive","metalness","roughness","hMesh","userData","isAccessHotspot","hoveredObj","animate","requestAnimationFrame","accessSpheres","traverse","obj","push","t","Date","now","update","render","lastClickTime","dom","getAccessSpheres","arr","onPointerDown","event","button","rect","getBoundingClientRect","mouse","Vector2","clientX","left","width","clientY","top","height","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","object","targetSceneId","idx","findIndex","s","String","_id","startTransition","onPointerMove","style","cursor","handleResize","aspect","removeEventListener","dispose","targetIdx","_sceneRef","_rendererRef","currentScene","nextScene","oldSphere","isMesh","imageUrl","newTexture","newMaterial","transparent","opacity","newSphere","progress","duration","animateFade","tsStart","step","ts","startFov","endFov","start","animateZoomOut","setTimeout","className","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/Viewer/TourViewer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport api from '../../services/api';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './TourViewer.css';\n\nfunction getAbsoluteImageUrl(image) {\n  if (!image) return '';\n  if (image.startsWith('/uploads/')) {\n    return `${process.env.REACT_APP_API_URL?.replace('/api', '') || 'http://localhost:5000'}${image}`;\n  }\n  return image;\n}\n\nfunction TourViewer() {\n  const { tourId } = useParams();\n  const [tour, setTour] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [fade, setFade] = useState(false);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const containerRef = useRef();\n  const navigate = useNavigate();\n  const cameraRef = useRef();\n  const sceneRef = useRef(); // Ref para la escena actual\n  const rendererRef = useRef(); // Ref para el renderer\n\n  useEffect(() => {\n    const fetchTour = async () => {\n      try {\n        const response = await api.getTour(tourId);\n        setTour(response.data);\n        setLoading(false);\n      } catch (err) {\n        setError('No se pudo cargar el tour');\n        setLoading(false);\n      }\n    };\n    fetchTour();\n  }, [tourId]);\n\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Limpiar canvas anterior si existe\n    if (containerRef.current) {\n      while (containerRef.current.firstChild) {\n        containerRef.current.removeChild(containerRef.current.firstChild);\n      }\n    }\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    // Soporte de zoom con scroll del mouse\n    controls.enableZoom = true;\n    controls.minDistance = 0.05;\n    controls.maxDistance = 2.5;\n    // Limitar fov para evitar zoom extremo\n    renderer.domElement.addEventListener('wheel', (e) => {\n      e.preventDefault();\n      camera.fov = Math.max(30, Math.min(100, camera.fov + (e.deltaY > 0 ? 2 : -2)));\n      camera.updateProjectionMatrix();\n    }, { passive: false });\n\n    // Cargar escena actual\n    const loadScene = (index) => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(getAbsoluteImageUrl(sceneData.image), texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({ color: 0x38bdf8, emissive: 0x0ea5e9, metalness: 0.3, roughness: 0.5 });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n\n    loadScene(currentSceneIndex);\n\n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                // Iniciar animación de transición\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n      if (renderer) {\n        renderer.dispose();\n        if (containerRef.current && renderer.domElement)\n          containerRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Reemplazar la función startTransition y la lógica de cambio de escena por un cross-fade\n  function startTransition(targetIdx) {\n    if (fade) return; // Evitar doble trigger\n    setFade(true);\n    setPendingSceneIndex(targetIdx);\n    const scene = sceneRef.current || (window._sceneRef && window._sceneRef.current);\n    const camera = cameraRef.current;\n    const renderer = (scene && scene.renderer) || (window._rendererRef && window._rendererRef.current);\n    if (!scene || !camera || !renderer) return;\n    // Obtener la textura actual\n    const currentScene = tour.scenes[currentSceneIndex];\n    const nextScene = tour.scenes[targetIdx];\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    // Buscar la esfera actual\n    let oldSphere = null;\n    scene.traverse(obj => {\n      if (obj.isMesh && obj.material && obj.material.map) {\n        oldSphere = obj;\n      }\n    });\n    // Precargar la textura nueva\n    const textureLoader = new THREE.TextureLoader();\n    let imageUrl = getAbsoluteImageUrl(nextScene.image);\n    textureLoader.load(imageUrl, newTexture => {\n      newTexture.minFilter = THREE.LinearFilter;\n      newTexture.magFilter = THREE.LinearFilter;\n      if (newTexture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n        newTexture.colorSpace = THREE.LinearSRGBColorSpace;\n      }\n      // Crear esfera nueva encima de la anterior\n      const newMaterial = new THREE.MeshBasicMaterial({\n        map: newTexture,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0\n      });\n      const newSphere = new THREE.Mesh(geometry, newMaterial);\n      scene.add(newSphere);\n      // Animar opacidad (cross-fade)\n      let progress = 0;\n      const duration = 600; // ms\n      const animateFade = (tsStart => function step(ts) {\n        if (!tsStart) tsStart = ts;\n        progress = Math.min((ts - tsStart) / duration, 1);\n        if (oldSphere && oldSphere.material) oldSphere.material.opacity = 1 - progress;\n        newMaterial.opacity = progress;\n        renderer.render(scene, camera);\n        if (progress < 1) {\n          requestAnimationFrame(step);\n        } else {\n          // Quitar la esfera anterior y dejar la nueva\n          if (oldSphere) scene.remove(oldSphere);\n          setCurrentSceneIndex(targetIdx);\n          setFade(false);\n          setPendingSceneIndex(null);\n        }\n      })(null);\n      requestAnimationFrame(animateFade);\n    });\n  }\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setFade(false);\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  if (loading) {\n    return <div className=\"viewer-loading\">Cargando tour...</div>;\n  }\n  if (error) {\n    return <div className=\"viewer-error\">{error}</div>;\n  }\n  if (!tour) {\n    return <div className=\"viewer-error\">Tour no encontrado</div>;\n  }\n\n  return (\n    <div className=\"tour-viewer-container\">\n      <div ref={containerRef} className=\"three-container\"></div>\n      <div className={`fade-overlay${fade ? ' visible' : ''}`}></div>\n      {/* Eliminar la sección de scene-selector para que no haya botones de navegación */}\n      <button className=\"btn-return\" onClick={() => navigate('/')}>Volver al mapa</button>\n    </div>\n  );\n}\n\nexport default TourViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}