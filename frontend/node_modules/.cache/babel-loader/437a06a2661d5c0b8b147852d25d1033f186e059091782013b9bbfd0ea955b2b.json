{"ast":null,"code":"import * as THREE from 'three';\nexport default function RadialFadeMaterial(prevTexture, nextTexture, progress) {\n  return new THREE.ShaderMaterial({\n    uniforms: {\n      uPrev: {\n        value: prevTexture\n      },\n      uNext: {\n        value: nextTexture\n      },\n      uProgress: {\n        value: progress\n      },\n      uResolution: {\n        value: new THREE.Vector2(1, 1)\n      },\n      uTime: {\n        value: 0\n      }\n    },\n    vertexShader: `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform sampler2D uPrev;\n      uniform sampler2D uNext;\n      uniform float uProgress;\n      uniform float uTime;\n      varying vec2 vUv;\n      \n      // Función de easing suave similar a Kuula\n      float easeInOutCubic(float t) {\n        return t < 0.5 ? 4.0 * t * t * t : 1.0 - pow(-2.0 * t + 2.0, 3.0) / 2.0;\n      }\n      \n      float easeOutQuart(float t) {\n        return 1.0 - pow(1.0 - t, 4.0);\n      }\n      \n      void main() {\n        // Centro de la imagen\n        vec2 center = vec2(0.5, 0.5);\n        float dist = distance(vUv, center);\n        \n        // Efecto de zoom suave durante la transición\n        float zoomEffect = easeInOutCubic(uProgress);\n        float zoomFactor = 1.0 + zoomEffect * 0.1;\n        \n        // Coordenadas con zoom\n        vec2 zoomedUv = (vUv - center) * zoomFactor + center;\n        \n        // Verificar si las coordenadas están dentro de los límites\n        if (zoomedUv.x < 0.0 || zoomedUv.x > 1.0 || zoomedUv.y < 0.0 || zoomedUv.y > 1.0) {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n          return;\n        }\n        \n        // Transición radial mejorada con múltiples ondas\n        float radial1 = smoothstep(0.0, 0.6, dist + uProgress * 0.8);\n        float radial2 = smoothstep(0.0, 0.4, dist + uProgress * 1.2);\n        float radial3 = smoothstep(0.0, 0.2, dist + uProgress * 1.6);\n        \n        // Combinar ondas radiales\n        float radial = (radial1 + radial2 + radial3) / 3.0;\n        \n        // Efecto de ondulación sutil\n        float wave = sin(dist * 20.0 - uProgress * 10.0) * 0.02;\n        radial += wave;\n        \n        // Blend final con easing suave\n        float blend = easeOutQuart(smoothstep(0.0, 1.0, uProgress * 1.3 + radial * 0.7));\n        \n        // Muestrear texturas con coordenadas zoomed\n        vec4 prevColor = texture2D(uPrev, zoomedUv);\n        vec4 nextColor = texture2D(uNext, zoomedUv);\n        \n        // Efecto de desenfoque sutil durante la transición\n        float blurAmount = sin(uProgress * 3.14159) * 0.02;\n        if (blurAmount > 0.0) {\n          vec4 prevBlur = (texture2D(uPrev, zoomedUv + vec2(blurAmount, 0.0)) +\n                          texture2D(uPrev, zoomedUv - vec2(blurAmount, 0.0)) +\n                          texture2D(uPrev, zoomedUv + vec2(0.0, blurAmount)) +\n                          texture2D(uPrev, zoomedUv - vec2(0.0, blurAmount))) / 4.0;\n          vec4 nextBlur = (texture2D(uNext, zoomedUv + vec2(blurAmount, 0.0)) +\n                          texture2D(uNext, zoomedUv - vec2(blurAmount, 0.0)) +\n                          texture2D(uNext, zoomedUv + vec2(0.0, blurAmount)) +\n                          texture2D(uNext, zoomedUv - vec2(0.0, blurAmount))) / 4.0;\n          prevColor = mix(prevColor, prevBlur, blurAmount * 10.0);\n          nextColor = mix(nextColor, nextBlur, blurAmount * 10.0);\n        }\n        \n        // Fundido cruzado con corrección gamma sutil\n        vec4 finalColor = mix(prevColor, nextColor, blend);\n        \n        // Ajuste de brillo sutil durante la transición\n        float brightnessAdjust = 1.0 + sin(uProgress * 3.14159) * 0.1;\n        finalColor.rgb *= brightnessAdjust;\n        \n        gl_FragColor = finalColor;\n      }\n    `,\n    transparent: false,\n    depthTest: false,\n    depthWrite: false\n  });\n}\n_c = RadialFadeMaterial;\nvar _c;\n$RefreshReg$(_c, \"RadialFadeMaterial\");","map":{"version":3,"names":["THREE","RadialFadeMaterial","prevTexture","nextTexture","progress","ShaderMaterial","uniforms","uPrev","value","uNext","uProgress","uResolution","Vector2","uTime","vertexShader","fragmentShader","transparent","depthTest","depthWrite","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/shaders/RadialFadeMaterial.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\nexport default function RadialFadeMaterial(prevTexture, nextTexture, progress) {\r\n  return new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      uPrev: { value: prevTexture },\r\n      uNext: { value: nextTexture },\r\n      uProgress: { value: progress },\r\n      uResolution: { value: new THREE.Vector2(1, 1) },\r\n      uTime: { value: 0 },\r\n    },\r\n    vertexShader: `\r\n      varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n      uniform sampler2D uPrev;\r\n      uniform sampler2D uNext;\r\n      uniform float uProgress;\r\n      uniform float uTime;\r\n      varying vec2 vUv;\r\n      \r\n      // Función de easing suave similar a Kuula\r\n      float easeInOutCubic(float t) {\r\n        return t < 0.5 ? 4.0 * t * t * t : 1.0 - pow(-2.0 * t + 2.0, 3.0) / 2.0;\r\n      }\r\n      \r\n      float easeOutQuart(float t) {\r\n        return 1.0 - pow(1.0 - t, 4.0);\r\n      }\r\n      \r\n      void main() {\r\n        // Centro de la imagen\r\n        vec2 center = vec2(0.5, 0.5);\r\n        float dist = distance(vUv, center);\r\n        \r\n        // Efecto de zoom suave durante la transición\r\n        float zoomEffect = easeInOutCubic(uProgress);\r\n        float zoomFactor = 1.0 + zoomEffect * 0.1;\r\n        \r\n        // Coordenadas con zoom\r\n        vec2 zoomedUv = (vUv - center) * zoomFactor + center;\r\n        \r\n        // Verificar si las coordenadas están dentro de los límites\r\n        if (zoomedUv.x < 0.0 || zoomedUv.x > 1.0 || zoomedUv.y < 0.0 || zoomedUv.y > 1.0) {\r\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n          return;\r\n        }\r\n        \r\n        // Transición radial mejorada con múltiples ondas\r\n        float radial1 = smoothstep(0.0, 0.6, dist + uProgress * 0.8);\r\n        float radial2 = smoothstep(0.0, 0.4, dist + uProgress * 1.2);\r\n        float radial3 = smoothstep(0.0, 0.2, dist + uProgress * 1.6);\r\n        \r\n        // Combinar ondas radiales\r\n        float radial = (radial1 + radial2 + radial3) / 3.0;\r\n        \r\n        // Efecto de ondulación sutil\r\n        float wave = sin(dist * 20.0 - uProgress * 10.0) * 0.02;\r\n        radial += wave;\r\n        \r\n        // Blend final con easing suave\r\n        float blend = easeOutQuart(smoothstep(0.0, 1.0, uProgress * 1.3 + radial * 0.7));\r\n        \r\n        // Muestrear texturas con coordenadas zoomed\r\n        vec4 prevColor = texture2D(uPrev, zoomedUv);\r\n        vec4 nextColor = texture2D(uNext, zoomedUv);\r\n        \r\n        // Efecto de desenfoque sutil durante la transición\r\n        float blurAmount = sin(uProgress * 3.14159) * 0.02;\r\n        if (blurAmount > 0.0) {\r\n          vec4 prevBlur = (texture2D(uPrev, zoomedUv + vec2(blurAmount, 0.0)) +\r\n                          texture2D(uPrev, zoomedUv - vec2(blurAmount, 0.0)) +\r\n                          texture2D(uPrev, zoomedUv + vec2(0.0, blurAmount)) +\r\n                          texture2D(uPrev, zoomedUv - vec2(0.0, blurAmount))) / 4.0;\r\n          vec4 nextBlur = (texture2D(uNext, zoomedUv + vec2(blurAmount, 0.0)) +\r\n                          texture2D(uNext, zoomedUv - vec2(blurAmount, 0.0)) +\r\n                          texture2D(uNext, zoomedUv + vec2(0.0, blurAmount)) +\r\n                          texture2D(uNext, zoomedUv - vec2(0.0, blurAmount))) / 4.0;\r\n          prevColor = mix(prevColor, prevBlur, blurAmount * 10.0);\r\n          nextColor = mix(nextColor, nextBlur, blurAmount * 10.0);\r\n        }\r\n        \r\n        // Fundido cruzado con corrección gamma sutil\r\n        vec4 finalColor = mix(prevColor, nextColor, blend);\r\n        \r\n        // Ajuste de brillo sutil durante la transición\r\n        float brightnessAdjust = 1.0 + sin(uProgress * 3.14159) * 0.1;\r\n        finalColor.rgb *= brightnessAdjust;\r\n        \r\n        gl_FragColor = finalColor;\r\n      }\r\n    `,\r\n    transparent: false,\r\n    depthTest: false,\r\n    depthWrite: false,\r\n  });\r\n} "],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,eAAe,SAASC,kBAAkBA,CAACC,WAAW,EAAEC,WAAW,EAAEC,QAAQ,EAAE;EAC7E,OAAO,IAAIJ,KAAK,CAACK,cAAc,CAAC;IAC9BC,QAAQ,EAAE;MACRC,KAAK,EAAE;QAAEC,KAAK,EAAEN;MAAY,CAAC;MAC7BO,KAAK,EAAE;QAAED,KAAK,EAAEL;MAAY,CAAC;MAC7BO,SAAS,EAAE;QAAEF,KAAK,EAAEJ;MAAS,CAAC;MAC9BO,WAAW,EAAE;QAAEH,KAAK,EAAE,IAAIR,KAAK,CAACY,OAAO,CAAC,CAAC,EAAE,CAAC;MAAE,CAAC;MAC/CC,KAAK,EAAE;QAAEL,KAAK,EAAE;MAAE;IACpB,CAAC;IACDM,YAAY,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,cAAc,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,WAAW,EAAE,KAAK;IAClBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE;EACd,CAAC,CAAC;AACJ;AAACC,EAAA,GAlGuBlB,kBAAkB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}