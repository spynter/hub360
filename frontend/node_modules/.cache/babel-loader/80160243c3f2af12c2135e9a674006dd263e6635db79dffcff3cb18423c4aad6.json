{"ast":null,"code":"var _jsxFileName = \"D:\\\\respaldo jose\\\\PROJECTS_V0\\\\hub360\\\\frontend\\\\src\\\\components\\\\Embed\\\\EmbedViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\nimport RadialFadeMaterial from '../shaders/RadialFadeMaterial';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmbedViewer({\n  tour\n}) {\n  _s();\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const cameraRef = useRef();\n  const [transitioning, setTransitioning] = useState(false);\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  const [prevTexture, setPrevTexture] = useState(null);\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Cargar escena actual\n    const loadScene = index => {\n      // Limpiar escena\n      while (scene.children.length > 0) {\n        scene.remove(scene.children[0]);\n      }\n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({\n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({\n                color: 0x38bdf8,\n                emissive: 0x0ea5e9,\n                metalness: 0.3,\n                roughness: 0.5\n              });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n\n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n    sceneRef.current = scene;\n\n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas por hotspot\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2((event.clientX - rect.left) / rect.width * 2 - 1, -((event.clientY - rect.top) / rect.height) * 2 + 1);\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n\n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Animación de transición\n  function startTransition(targetIdx) {\n    if (transitioning) return;\n    // Capturar textura de la escena actual\n    const renderTarget = new THREE.WebGLRenderTarget(rendererRef.current.domElement.width, rendererRef.current.domElement.height);\n    rendererRef.current.setRenderTarget(renderTarget);\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n    rendererRef.current.setRenderTarget(null);\n    setPrevTexture(renderTarget.texture);\n    setTransitioning(true);\n    setTransitionProgress(0);\n    setPendingSceneIndex(targetIdx);\n  }\n  useEffect(() => {\n    if (!transitioning) return;\n    let frame;\n    function animate() {\n      setTransitionProgress(prev => {\n        const next = Math.min(prev + 0.04, 1);\n        if (next < 1) {\n          frame = requestAnimationFrame(animate);\n        } else {\n          setTransitioning(false);\n          setPrevTexture(null);\n          setPendingSceneIndex(null);\n        }\n        return next;\n      });\n    }\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }, [transitioning]);\n  useEffect(() => {\n    if (!sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n    if (!transitioning || !prevTexture) return;\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    const currentScene = tour.scenes[pendingSceneIndex];\n    const loader = new THREE.TextureLoader();\n    loader.load(currentScene.image, nextTexture => {\n      const material = RadialFadeMaterial(prevTexture, nextTexture, transitionProgress);\n      const sphere = new THREE.Mesh(geometry, material);\n      sceneRef.current.add(sphere);\n      function renderTransition() {\n        material.uniforms.uProgress.value = transitionProgress;\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n        if (transitioning) requestAnimationFrame(renderTransition);else sceneRef.current.remove(sphere);\n      }\n      renderTransition();\n    });\n  }, [transitioning, transitionProgress]);\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n    startTransition(idx);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"embed-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"three-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), tour.scenes.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scene-selector\",\n      children: tour.scenes.map((scene, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `scene-btn ${index === currentSceneIndex ? 'active' : ''}`,\n        onClick: () => handleSceneBtn(index),\n        children: scene.name || `Escena ${index + 1}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n}\n_s(EmbedViewer, \"ItfCo1cwATmUjMCx1HRHJSOlw54=\");\n_c = EmbedViewer;\nexport default EmbedViewer;\nvar _c;\n$RefreshReg$(_c, \"EmbedViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","OrbitControls","RadialFadeMaterial","jsxDEV","_jsxDEV","EmbedViewer","tour","_s","containerRef","currentSceneIndex","setCurrentSceneIndex","pendingSceneIndex","setPendingSceneIndex","cameraRef","transitioning","setTransitioning","transitionProgress","setTransitionProgress","prevTexture","setPrevTexture","sceneRef","rendererRef","scenes","length","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","current","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","enableDamping","dampingFactor","loadScene","index","children","remove","sceneData","geometry","SphereGeometry","scale","textureLoader","TextureLoader","load","image","texture","minFilter","LinearFilter","magFilter","colorSpace","undefined","LinearSRGBColorSpace","material","MeshBasicMaterial","map","side","DoubleSide","sphere","Mesh","add","Array","isArray","hotspots","forEach","hotspot","type","radius","phi","MathUtils","degToRad","pitch","theta","yaw","x","Math","sin","y","cos","z","hGeo","hMat","MeshStandardMaterial","color","emissive","metalness","roughness","hMesh","userData","isAccessHotspot","hoveredObj","animate","requestAnimationFrame","accessSpheres","traverse","obj","push","t","Date","now","update","render","lastClickTime","dom","getAccessSpheres","arr","onPointerDown","event","button","rect","getBoundingClientRect","mouse","Vector2","clientX","left","width","clientY","top","height","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","object","targetSceneId","idx","findIndex","s","String","_id","startTransition","onPointerMove","style","cursor","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","dispose","removeChild","targetIdx","renderTarget","WebGLRenderTarget","setRenderTarget","frame","prev","next","min","cancelAnimationFrame","currentScene","loader","nextTexture","renderTransition","uniforms","uProgress","value","startFov","fov","endFov","duration","start","animateZoomOut","ts","progress","setTimeout","handleSceneBtn","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","_c","$RefreshReg$"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/src/components/Embed/EmbedViewer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './EmbedViewer.css';\nimport RadialFadeMaterial from '../shaders/RadialFadeMaterial';\n\nfunction EmbedViewer({ tour }) {\n  const containerRef = useRef();\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [pendingSceneIndex, setPendingSceneIndex] = useState(null);\n  const cameraRef = useRef();\n  const [transitioning, setTransitioning] = useState(false);\n  const [transitionProgress, setTransitionProgress] = useState(0);\n  const [prevTexture, setPrevTexture] = useState(null);\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n\n  useEffect(() => {\n    if (!tour || !tour.scenes || tour.scenes.length === 0) return;\n\n    // Configuración de Three.js\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75, \n      window.innerWidth / window.innerHeight, \n      0.1, \n      1000\n    );\n    camera.position.set(0, 0, 0.1);\n    cameraRef.current = camera;\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    \n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    \n    // Cargar escena actual\n    const loadScene = (index) => {\n      // Limpiar escena\n      while(scene.children.length > 0) { \n        scene.remove(scene.children[0]); \n      }\n      \n      const sceneData = tour.scenes[index];\n      const geometry = new THREE.SphereGeometry(500, 128, 96);\n      geometry.scale(-1, 1, 1);\n      \n      const textureLoader = new THREE.TextureLoader();\n      textureLoader.load(sceneData.image, texture => {\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        if (texture.colorSpace !== undefined && THREE.LinearSRGBColorSpace) {\n          texture.colorSpace = THREE.LinearSRGBColorSpace;\n        }\n        const material = new THREE.MeshBasicMaterial({ \n          map: texture,\n          side: THREE.DoubleSide\n        });\n        const sphere = new THREE.Mesh(geometry, material);\n        scene.add(sphere);\n        // Renderizar hotspots de acceso\n        if (Array.isArray(sceneData.hotspots)) {\n          sceneData.hotspots.forEach(hotspot => {\n            if (hotspot.type === 'access') {\n              const radius = 500;\n              const phi = THREE.MathUtils.degToRad(90 - hotspot.pitch);\n              const theta = THREE.MathUtils.degToRad(hotspot.yaw);\n              const x = radius * Math.sin(phi) * Math.sin(theta);\n              const y = radius * Math.cos(phi);\n              const z = radius * Math.sin(phi) * Math.cos(theta);\n              const hGeo = new THREE.SphereGeometry(12, 32, 32);\n              const hMat = new THREE.MeshStandardMaterial({ color: 0x38bdf8, emissive: 0x0ea5e9, metalness: 0.3, roughness: 0.5 });\n              const hMesh = new THREE.Mesh(hGeo, hMat);\n              hMesh.position.set(x, y, z);\n              hMesh.userData.hotspot = hotspot;\n              hMesh.userData.isAccessHotspot = true;\n              scene.add(hMesh);\n            }\n          });\n        }\n      });\n    };\n    \n    // Cargar primera escena\n    loadScene(currentSceneIndex);\n    sceneRef.current = scene;\n    \n    // Animación y hover\n    let hoveredObj = null;\n    const animate = () => {\n      requestAnimationFrame(animate);\n      // Recalcular accessSpheres en cada frame\n      const accessSpheres = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) accessSpheres.push(obj);\n      });\n      // Animación de expansión/contracción para esferas access\n      if (accessSpheres.length > 0) {\n        const t = Date.now() * 0.003;\n        accessSpheres.forEach(sphere => {\n          let scale = 1.1 + 0.15 * Math.sin(t + sphere.position.x);\n          if (sphere === hoveredObj) scale *= 1.25; // resalta al hacer hover\n          sphere.scale.set(scale, scale, scale);\n        });\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Doble click para navegar entre escenas por hotspot\n    let lastClickTime = 0;\n    const dom = renderer.domElement;\n    function getAccessSpheres() {\n      const arr = [];\n      scene.traverse(obj => {\n        if (obj.userData && obj.userData.isAccessHotspot) arr.push(obj);\n      });\n      return arr;\n    }\n    function onPointerDown(event) {\n      if (event.button !== 0) return;\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        const obj = intersects[0].object;\n        const now = Date.now();\n        if (obj.userData.isAccessHotspot) {\n          if (now - lastClickTime < 400) {\n            const hotspot = obj.userData.hotspot;\n            if (hotspot && hotspot.type === 'access' && hotspot.targetSceneId) {\n              const idx = tour.scenes.findIndex(s => String(s._id) === String(hotspot.targetSceneId));\n              if (idx !== -1) {\n                startTransition(idx);\n              }\n            }\n          }\n          lastClickTime = now;\n        }\n      }\n    }\n    function onPointerMove(event) {\n      const rect = dom.getBoundingClientRect();\n      const mouse = new THREE.Vector2(\n        ((event.clientX - rect.left) / rect.width) * 2 - 1,\n        -((event.clientY - rect.top) / rect.height) * 2 + 1\n      );\n      const raycaster = new THREE.Raycaster();\n      const accessSpheres = getAccessSpheres();\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(accessSpheres, true);\n      if (intersects.length > 0) {\n        hoveredObj = intersects[0].object;\n        dom.style.cursor = 'pointer';\n      } else {\n        hoveredObj = null;\n        dom.style.cursor = '';\n      }\n    }\n    dom.addEventListener('pointerdown', onPointerDown);\n    dom.addEventListener('pointermove', onPointerMove);\n    \n    // Manejar redimensionamiento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    \n    // Limpieza\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (renderer) {\n        renderer.dispose();\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      dom.removeEventListener('pointerdown', onPointerDown);\n      dom.removeEventListener('pointermove', onPointerMove);\n    };\n  }, [tour, currentSceneIndex]);\n\n  // Animación de transición\n  function startTransition(targetIdx) {\n    if (transitioning) return;\n    // Capturar textura de la escena actual\n    const renderTarget = new THREE.WebGLRenderTarget(\n      rendererRef.current.domElement.width,\n      rendererRef.current.domElement.height\n    );\n    rendererRef.current.setRenderTarget(renderTarget);\n    rendererRef.current.render(sceneRef.current, cameraRef.current);\n    rendererRef.current.setRenderTarget(null);\n    setPrevTexture(renderTarget.texture);\n    setTransitioning(true);\n    setTransitionProgress(0);\n    setPendingSceneIndex(targetIdx);\n  }\n\n  useEffect(() => {\n    if (!transitioning) return;\n    let frame;\n    function animate() {\n      setTransitionProgress(prev => {\n        const next = Math.min(prev + 0.04, 1);\n        if (next < 1) {\n          frame = requestAnimationFrame(animate);\n        } else {\n          setTransitioning(false);\n          setPrevTexture(null);\n          setPendingSceneIndex(null);\n        }\n        return next;\n      });\n    }\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }, [transitioning]);\n\n  useEffect(() => {\n    if (!sceneRef.current || !rendererRef.current || !cameraRef.current) return;\n    if (!transitioning || !prevTexture) return;\n    const geometry = new THREE.SphereGeometry(500, 128, 96);\n    geometry.scale(-1, 1, 1);\n    const currentScene = tour.scenes[pendingSceneIndex];\n    const loader = new THREE.TextureLoader();\n    loader.load(currentScene.image, nextTexture => {\n      const material = RadialFadeMaterial(prevTexture, nextTexture, transitionProgress);\n      const sphere = new THREE.Mesh(geometry, material);\n      sceneRef.current.add(sphere);\n      function renderTransition() {\n        material.uniforms.uProgress.value = transitionProgress;\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n        if (transitioning) requestAnimationFrame(renderTransition);\n        else sceneRef.current.remove(sphere);\n      }\n      renderTransition();\n    });\n  }, [transitioning, transitionProgress]);\n\n  // Cuando cambia la escena, hacer fade out y zoom out\n  useEffect(() => {\n    if (pendingSceneIndex === null) return;\n    // Animar FOV (zoom out) y quitar fade\n    const camera = cameraRef.current;\n    if (!camera) return;\n    let startFov = camera.fov;\n    let endFov = 75;\n    let duration = 400;\n    let start = null;\n    function animateZoomOut(ts) {\n      if (!start) start = ts;\n      let progress = Math.min((ts - start) / duration, 1);\n      camera.fov = startFov + (endFov - startFov) * progress;\n      camera.updateProjectionMatrix();\n      if (progress < 1) {\n        requestAnimationFrame(animateZoomOut);\n      } else {\n        setPendingSceneIndex(null);\n      }\n    }\n    setTimeout(() => {\n      requestAnimationFrame(animateZoomOut);\n    }, 250);\n  }, [currentSceneIndex]);\n\n  // Handler para botones de escena\n  function handleSceneBtn(idx) {\n    if (idx === currentSceneIndex) return;\n    startTransition(idx);\n  }\n\n  return (\n    <div className=\"embed-viewer\">\n      <div ref={containerRef} className=\"three-container\"></div>\n      {tour.scenes.length > 1 && (\n        <div className=\"scene-selector\">\n          {tour.scenes.map((scene, index) => (\n            <button\n              key={index}\n              className={`scene-btn ${index === currentSceneIndex ? 'active' : ''}`}\n              onClick={() => handleSceneBtn(index)}\n            >\n              {scene.name || `Escena ${index + 1}`}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmbedViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}