{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.legacyOptionsAdapter = legacyOptionsAdapter;\nconst url = require(\"url\");\nconst debug_1 = require(\"../debug\");\nconst logger_1 = require(\"../logger\");\nconst debug = debug_1.Debug.extend('legacy-options-adapter');\n// https://github.com/chimurai/http-proxy-middleware/blob/7341704d0aa9d1606dfd37ebfdffddd34c894784/src/_handlers.ts#L20-L27\nconst proxyEventMap = {\n  onError: 'error',\n  onProxyReq: 'proxyReq',\n  onProxyRes: 'proxyRes',\n  onProxyReqWs: 'proxyReqWs',\n  onOpen: 'open',\n  onClose: 'close'\n};\n/**\n * Convert {@link LegacyOptions legacy Options} to new {@link Options}\n */\nfunction legacyOptionsAdapter(legacyContext, legacyOptions) {\n  let options = {};\n  let logger;\n  // https://github.com/chimurai/http-proxy-middleware/pull/716\n  if (typeof legacyContext === 'string' && !!url.parse(legacyContext).host) {\n    throw new Error(`Shorthand syntax is removed from legacyCreateProxyMiddleware().\n      Please use \"legacyCreateProxyMiddleware({ target: 'http://www.example.org' })\" instead.\n\n      More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#removed-shorthand-usage\n      `);\n  }\n  // detect old \"context\" argument and convert to \"options.pathFilter\"\n  // https://github.com/chimurai/http-proxy-middleware/pull/722/files#diff-a2a171449d862fe29692ce031981047d7ab755ae7f84c707aef80701b3ea0c80L4\n  if (legacyContext && legacyOptions) {\n    debug('map legacy context/filter to options.pathFilter');\n    options = {\n      ...legacyOptions,\n      pathFilter: legacyContext\n    };\n    logger = getLegacyLogger(options);\n    logger.warn(`[http-proxy-middleware] Legacy \"context\" argument is deprecated. Migrate your \"context\" to \"options.pathFilter\":\n\n      const options = {\n        pathFilter: '${legacyContext}',\n      }\n\n      More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#removed-context-argument\n      `);\n  } else if (legacyContext && !legacyOptions) {\n    options = {\n      ...legacyContext\n    };\n    logger = getLegacyLogger(options);\n  } else {\n    logger = getLegacyLogger({});\n  }\n  // map old event names to new event names\n  // https://github.com/chimurai/http-proxy-middleware/pull/745/files#diff-c54113cf61ec99691748a3890bfbeb00e10efb3f0a76f03a0fd9ec49072e410aL48-L53\n  Object.entries(proxyEventMap).forEach(([legacyEventName, proxyEventName]) => {\n    if (options[legacyEventName]) {\n      options.on = {\n        ...options.on\n      };\n      options.on[proxyEventName] = options[legacyEventName];\n      debug('map legacy event \"%s\" to \"on.%s\"', legacyEventName, proxyEventName);\n      logger.warn(`[http-proxy-middleware] Legacy \"${legacyEventName}\" is deprecated. Migrate to \"options.on.${proxyEventName}\":\n\n        const options = {\n          on: {\n            ${proxyEventName}: () => {},\n          },\n        }\n\n        More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#refactored-proxy-events\n        `);\n    }\n  });\n  // map old logProvider to new logger\n  // https://github.com/chimurai/http-proxy-middleware/pull/749\n  const logProvider = options.logProvider && options.logProvider();\n  const logLevel = options.logLevel;\n  debug('legacy logLevel', logLevel);\n  debug('legacy logProvider: %O', logProvider);\n  if (typeof logLevel === 'string' && logLevel !== 'silent') {\n    debug('map \"logProvider\" to \"logger\"');\n    logger.warn(`[http-proxy-middleware] Legacy \"logLevel\" and \"logProvider\" are deprecated. Migrate to \"options.logger\":\n\n      const options = {\n        logger: console,\n      }\n\n      More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#removed-logprovider-and-loglevel-options\n      `);\n  }\n  return options;\n}\nfunction getLegacyLogger(options) {\n  const legacyLogger = options.logProvider && options.logProvider();\n  if (legacyLogger) {\n    options.logger = legacyLogger;\n  }\n  return (0, logger_1.getLogger)(options);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","legacyOptionsAdapter","url","require","debug_1","logger_1","debug","Debug","extend","proxyEventMap","onError","onProxyReq","onProxyRes","onProxyReqWs","onOpen","onClose","legacyContext","legacyOptions","options","logger","parse","host","Error","pathFilter","getLegacyLogger","warn","entries","forEach","legacyEventName","proxyEventName","on","logProvider","logLevel","legacyLogger","getLogger"],"sources":["D:/respaldo jose/PROJECTS_V0/hub360/frontend/node_modules/http-proxy-middleware/dist/legacy/options-adapter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.legacyOptionsAdapter = legacyOptionsAdapter;\nconst url = require(\"url\");\nconst debug_1 = require(\"../debug\");\nconst logger_1 = require(\"../logger\");\nconst debug = debug_1.Debug.extend('legacy-options-adapter');\n// https://github.com/chimurai/http-proxy-middleware/blob/7341704d0aa9d1606dfd37ebfdffddd34c894784/src/_handlers.ts#L20-L27\nconst proxyEventMap = {\n    onError: 'error',\n    onProxyReq: 'proxyReq',\n    onProxyRes: 'proxyRes',\n    onProxyReqWs: 'proxyReqWs',\n    onOpen: 'open',\n    onClose: 'close',\n};\n/**\n * Convert {@link LegacyOptions legacy Options} to new {@link Options}\n */\nfunction legacyOptionsAdapter(legacyContext, legacyOptions) {\n    let options = {};\n    let logger;\n    // https://github.com/chimurai/http-proxy-middleware/pull/716\n    if (typeof legacyContext === 'string' && !!url.parse(legacyContext).host) {\n        throw new Error(`Shorthand syntax is removed from legacyCreateProxyMiddleware().\n      Please use \"legacyCreateProxyMiddleware({ target: 'http://www.example.org' })\" instead.\n\n      More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#removed-shorthand-usage\n      `);\n    }\n    // detect old \"context\" argument and convert to \"options.pathFilter\"\n    // https://github.com/chimurai/http-proxy-middleware/pull/722/files#diff-a2a171449d862fe29692ce031981047d7ab755ae7f84c707aef80701b3ea0c80L4\n    if (legacyContext && legacyOptions) {\n        debug('map legacy context/filter to options.pathFilter');\n        options = { ...legacyOptions, pathFilter: legacyContext };\n        logger = getLegacyLogger(options);\n        logger.warn(`[http-proxy-middleware] Legacy \"context\" argument is deprecated. Migrate your \"context\" to \"options.pathFilter\":\n\n      const options = {\n        pathFilter: '${legacyContext}',\n      }\n\n      More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#removed-context-argument\n      `);\n    }\n    else if (legacyContext && !legacyOptions) {\n        options = { ...legacyContext };\n        logger = getLegacyLogger(options);\n    }\n    else {\n        logger = getLegacyLogger({});\n    }\n    // map old event names to new event names\n    // https://github.com/chimurai/http-proxy-middleware/pull/745/files#diff-c54113cf61ec99691748a3890bfbeb00e10efb3f0a76f03a0fd9ec49072e410aL48-L53\n    Object.entries(proxyEventMap).forEach(([legacyEventName, proxyEventName]) => {\n        if (options[legacyEventName]) {\n            options.on = { ...options.on };\n            options.on[proxyEventName] = options[legacyEventName];\n            debug('map legacy event \"%s\" to \"on.%s\"', legacyEventName, proxyEventName);\n            logger.warn(`[http-proxy-middleware] Legacy \"${legacyEventName}\" is deprecated. Migrate to \"options.on.${proxyEventName}\":\n\n        const options = {\n          on: {\n            ${proxyEventName}: () => {},\n          },\n        }\n\n        More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#refactored-proxy-events\n        `);\n        }\n    });\n    // map old logProvider to new logger\n    // https://github.com/chimurai/http-proxy-middleware/pull/749\n    const logProvider = options.logProvider && options.logProvider();\n    const logLevel = options.logLevel;\n    debug('legacy logLevel', logLevel);\n    debug('legacy logProvider: %O', logProvider);\n    if (typeof logLevel === 'string' && logLevel !== 'silent') {\n        debug('map \"logProvider\" to \"logger\"');\n        logger.warn(`[http-proxy-middleware] Legacy \"logLevel\" and \"logProvider\" are deprecated. Migrate to \"options.logger\":\n\n      const options = {\n        logger: console,\n      }\n\n      More details: https://github.com/chimurai/http-proxy-middleware/blob/master/MIGRATION.md#removed-logprovider-and-loglevel-options\n      `);\n    }\n    return options;\n}\nfunction getLegacyLogger(options) {\n    const legacyLogger = options.logProvider && options.logProvider();\n    if (legacyLogger) {\n        options.logger = legacyLogger;\n    }\n    return (0, logger_1.getLogger)(options);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}